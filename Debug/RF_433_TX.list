
RF_433_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08005690  08005690  00006690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a70  08005a70  00007238  2**0
                  CONTENTS
  4 .ARM          00000008  08005a70  08005a70  00006a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a78  08005a78  00007238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a78  08005a78  00006a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  08005a80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000238  08005cb8  00007238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08005cb8  00007448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e89  00000000  00000000  00007261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2c  00000000  00000000  000100ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00011e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085f  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001881f  00000000  00000000  00013177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba35  00000000  00000000  0002b996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f7b  00000000  00000000  000373cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  000c138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000c5070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08005674 	.word	0x08005674

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08005674 	.word	0x08005674

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a16      	ldr	r2, [pc, #88]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_GPIO_Init+0x8c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_433_GPIO_Port, TX_433_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <MX_GPIO_Init+0x90>)
 8000aea:	f001 f8de 	bl	8001caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_433_Pin;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_433_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_GPIO_Init+0x90>)
 8000b06:	f000 ff35 	bl	8001974 <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <prepare_data>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
// This function prepares the "Hello World" message
uint8_t prepare_data(uint8_t *buffer, uint8_t buffer_size) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	const char *message = "Hello World";
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <prepare_data+0x3c>)
 8000b2a:	60fb      	str	r3, [r7, #12]
	uint8_t message_length = strlen(message);
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fb0f 	bl	8000150 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	72fb      	strb	r3, [r7, #11]
	if (message_length > buffer_size) {
 8000b36:	7afa      	ldrb	r2, [r7, #11]
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d901      	bls.n	8000b42 <prepare_data+0x26>
		return 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e006      	b.n	8000b50 <prepare_data+0x34>
	}
	memcpy(buffer, message, message_length);
 8000b42:	7afb      	ldrb	r3, [r7, #11]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68f9      	ldr	r1, [r7, #12]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f002 ff8a 	bl	8003a62 <memcpy>
	return message_length;
 8000b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08005690 	.word	0x08005690

08000b5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b60:	f000 fd74 	bl	800164c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b64:	f000 f83a 	bl	8000bdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b68:	f7ff ff8e 	bl	8000a88 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000b6c:	f000 f9c0 	bl	8000ef0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// VirtualWire setup
	vw_set_tx_pin(TX_GPIO_PORT, TX_PIN);  // Define VW_TX_PIN appropriately
 8000b70:	2101      	movs	r1, #1
 8000b72:	4815      	ldr	r0, [pc, #84]	@ (8000bc8 <main+0x6c>)
 8000b74:	f000 faa8 	bl	80010c8 <vw_set_tx_pin>
	vw_setup(2000);  // Set your desired baud rate
 8000b78:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b7c:	f000 fa62 	bl	8001044 <vw_setup>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		tx_length = prepare_data(tx_buffer, sizeof(tx_buffer));
 8000b80:	211e      	movs	r1, #30
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <main+0x70>)
 8000b84:	f7ff ffca 	bl	8000b1c <prepare_data>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <main+0x74>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		if (tx_length > 0) {
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <main+0x74>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00e      	beq.n	8000bb6 <main+0x5a>
			vw_send(tx_buffer, tx_length);
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <main+0x74>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <main+0x70>)
 8000ba0:	f000 fc76 	bl	8001490 <vw_send>
			vw_wait_tx();
 8000ba4:	f000 fc64 	bl	8001470 <vw_wait_tx>
			printf("Transmitted %d bytes\n", tx_length);
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <main+0x74>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <main+0x78>)
 8000bb0:	f002 fd82 	bl	80036b8 <iprintf>
 8000bb4:	e002      	b.n	8000bbc <main+0x60>
		} else {
			printf("Error preparing data for transmission\n");
 8000bb6:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <main+0x7c>)
 8000bb8:	f002 fde6 	bl	8003788 <puts>
		}
		HAL_Delay(TRANSMIT_DELAY);
 8000bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc0:	f000 fda6 	bl	8001710 <HAL_Delay>
		tx_length = prepare_data(tx_buffer, sizeof(tx_buffer));
 8000bc4:	e7dc      	b.n	8000b80 <main+0x24>
 8000bc6:	bf00      	nop
 8000bc8:	40010c00 	.word	0x40010c00
 8000bcc:	20000254 	.word	0x20000254
 8000bd0:	20000272 	.word	0x20000272
 8000bd4:	0800569c 	.word	0x0800569c
 8000bd8:	080056b4 	.word	0x080056b4

08000bdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	@ 0x40
 8000be0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	@ 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 feac 	bl	8003948 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f859 	bl	8001cdc <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x58>
		Error_Handler();
 8000c30:	f000 f828 	bl	8000c84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c44:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fac6 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
		Error_Handler();
 8000c5a:	f000 f813 	bl	8000c84 <Error_Handler>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	@ 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c76:	d101      	bne.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    vw_timer_handler();
 8000c78:	f000 fb6e 	bl	8001358 <vw_timer_handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_MspInit+0x5c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <HAL_MspInit+0x5c>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_MspInit+0x5c>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_MspInit+0x5c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_MspInit+0x5c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_MspInit+0x60>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_MspInit+0x60>)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 fcc8 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f001 fc43 	bl	80025dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000278 	.word	0x20000278

08000d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_kill>:

int _kill(int pid, int sig)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d78:	f002 fe38 	bl	80039ec <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2216      	movs	r2, #22
 8000d80:	601a      	str	r2, [r3, #0]
  return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_exit>:

void _exit (int status)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffe7 	bl	8000d6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <_exit+0x12>

08000da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
  }

  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e009      	b.n	8000e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf1      	blt.n	8000df0 <_write+0x12>
  }
  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f002 fda0 	bl	80039ec <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005000 	.word	0x20005000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	20000274 	.word	0x20000274
 8000ee0:	20000448 	.word	0x20000448

08000ee4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  // Assuming a system clock of 72MHz and desired interrupt frequency of 16kHz (8 * 2000Hz baud rate)
  htim2.Instance = TIM2;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;  // 72MHz / (71+1) = 1MHz timer clock
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f16:	2247      	movs	r2, #71	@ 0x47
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62;  // 1MHz / (62+1) ≈ 16kHz
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f22:	223e      	movs	r2, #62	@ 0x3e
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f34:	f001 fab0 	bl	8002498 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000f3e:	f7ff fea1 	bl	8000c84 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f50:	f001 fc34 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f7ff fe93 	bl	8000c84 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480a      	ldr	r0, [pc, #40]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f6c:	f001 fe16 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000f76:	f7ff fe85 	bl	8000c84 <Error_Handler>
  }

  // Start the timer in interrupt mode
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f7c:	f001 fadc 	bl	8002538 <HAL_TIM_Base_Start_IT>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f86:	f7ff fe7d 	bl	8000c84 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000278 	.word	0x20000278

08000f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa8:	d113      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_TIM_Base_MspInit+0x44>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <HAL_TIM_Base_MspInit+0x44>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_TIM_Base_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	201c      	movs	r0, #28
 8000fc8:	f000 fc9d 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fcc:	201c      	movs	r0, #28
 8000fce:	f000 fcb6 	bl	800193e <HAL_NVIC_EnableIRQ>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <_crc_ccitt_update>:
            crc <<= 1;
    }
    return crc;
}

uint16_t _crc_ccitt_update(uint16_t crc, uint8_t data) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	4613      	mov	r3, r2
 8000fee:	717b      	strb	r3, [r7, #5]
    data ^= lo8(crc);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ff8:	4053      	eors	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	717b      	strb	r3, [r7, #5]
    data ^= data << 4;
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	b25a      	sxtb	r2, r3
 8001004:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001008:	4053      	eors	r3, r2
 800100a:	b25b      	sxtb	r3, r3
 800100c:	717b      	strb	r3, [r7, #5]
    return ((((uint16_t)data << 8) | hi8(crc)) ^ (uint8_t)(data >> 4) ^ ((uint16_t)data << 3));
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21a      	sxth	r2, r3
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b21b      	sxth	r3, r3
 8001028:	4053      	eors	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29b      	uxth	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <vw_setup>:
static uint8_t vw_rx_bad = 0;
static uint8_t vw_rx_good = 0;
static uint8_t symbols[] = { 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c, 0x23,
		0x25, 0x26, 0x29, 0x2a, 0x2c, 0x32, 0x34 };

void vw_setup(uint16_t speed) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	// Initialize internal state
	vw_rx_bits = 0;
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <vw_setup+0x34>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
	vw_tx_enabled = false;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <vw_setup+0x38>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	vw_rx_enabled = false;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <vw_setup+0x3c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	vw_rx_active = false;
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <vw_setup+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	vw_rx_done = false;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <vw_setup+0x44>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200002d0 	.word	0x200002d0
 800107c:	200002c4 	.word	0x200002c4
 8001080:	200002cf 	.word	0x200002cf
 8001084:	200002cd 	.word	0x200002cd
 8001088:	200002ce 	.word	0x200002ce

0800108c <vw_symbol_6to4>:
	while (count-- > 0)
		crc = _crc_ccitt_update(crc, *ptr++);
	return crc;
}

uint8_t vw_symbol_6to4(uint8_t symbol) {
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 16; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e00a      	b.n	80010b2 <vw_symbol_6to4+0x26>
		if (symbol == symbols[i])
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <vw_symbol_6to4+0x38>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d101      	bne.n	80010ac <vw_symbol_6to4+0x20>
			return i;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	e006      	b.n	80010ba <vw_symbol_6to4+0x2e>
	for (i = 0; i < 16; i++)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d9f1      	bls.n	800109c <vw_symbol_6to4+0x10>
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000058 	.word	0x20000058

080010c8 <vw_set_tx_pin>:

void vw_set_tx_pin(GPIO_TypeDef *port, uint16_t pin) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	vw_tx_pin = pin;
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <vw_set_tx_pin+0x20>)
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000056 	.word	0x20000056

080010ec <vw_pll>:

void vw_set_ptt_inverted(uint8_t inverted) {
	vw_ptt_inverted = inverted;
}

void vw_pll() {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	if (vw_rx_sample)
 80010f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001270 <vw_pll+0x184>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <vw_pll+0x1a>
		vw_rx_integrator++;
 80010fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001274 <vw_pll+0x188>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b5c      	ldr	r3, [pc, #368]	@ (8001274 <vw_pll+0x188>)
 8001104:	701a      	strb	r2, [r3, #0]

	if (vw_rx_sample != vw_rx_last_sample) {
 8001106:	4b5a      	ldr	r3, [pc, #360]	@ (8001270 <vw_pll+0x184>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b5b      	ldr	r3, [pc, #364]	@ (8001278 <vw_pll+0x18c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d011      	beq.n	8001136 <vw_pll+0x4a>
		vw_rx_pll_ramp += (
				(vw_rx_pll_ramp < VW_RAMP_TRANSITION) ?
 8001112:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <vw_pll+0x190>)
 8001114:	781b      	ldrb	r3, [r3, #0]
		vw_rx_pll_ramp += (
 8001116:	2b4f      	cmp	r3, #79	@ 0x4f
 8001118:	d801      	bhi.n	800111e <vw_pll+0x32>
 800111a:	220b      	movs	r2, #11
 800111c:	e000      	b.n	8001120 <vw_pll+0x34>
 800111e:	221d      	movs	r2, #29
 8001120:	4b56      	ldr	r3, [pc, #344]	@ (800127c <vw_pll+0x190>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b54      	ldr	r3, [pc, #336]	@ (800127c <vw_pll+0x190>)
 800112a:	701a      	strb	r2, [r3, #0]
				VW_RAMP_INC_RETARD :
														VW_RAMP_INC_ADVANCE);
		vw_rx_last_sample = vw_rx_sample;
 800112c:	4b50      	ldr	r3, [pc, #320]	@ (8001270 <vw_pll+0x184>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b51      	ldr	r3, [pc, #324]	@ (8001278 <vw_pll+0x18c>)
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <vw_pll+0x56>
	} else {
		vw_rx_pll_ramp += VW_RAMP_INC;
 8001136:	4b51      	ldr	r3, [pc, #324]	@ (800127c <vw_pll+0x190>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3314      	adds	r3, #20
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <vw_pll+0x190>)
 8001140:	701a      	strb	r2, [r3, #0]
	}

	if (vw_rx_pll_ramp >= VW_RX_RAMP_LEN) {
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <vw_pll+0x190>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b9f      	cmp	r3, #159	@ 0x9f
 8001148:	f240 808f 	bls.w	800126a <vw_pll+0x17e>
		vw_rx_bits >>= 1;
 800114c:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <vw_pll+0x194>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4a      	ldr	r3, [pc, #296]	@ (8001280 <vw_pll+0x194>)
 8001156:	801a      	strh	r2, [r3, #0]

		if (vw_rx_integrator >= 5)
 8001158:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <vw_pll+0x188>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d906      	bls.n	800116e <vw_pll+0x82>
			vw_rx_bits |= 0x800;
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <vw_pll+0x194>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b45      	ldr	r3, [pc, #276]	@ (8001280 <vw_pll+0x194>)
 800116c:	801a      	strh	r2, [r3, #0]

		vw_rx_pll_ramp -= VW_RX_RAMP_LEN;
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <vw_pll+0x190>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3360      	adds	r3, #96	@ 0x60
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <vw_pll+0x190>)
 8001178:	701a      	strb	r2, [r3, #0]
		vw_rx_integrator = 0;
 800117a:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <vw_pll+0x188>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

		if (vw_rx_active) {
 8001180:	4b40      	ldr	r3, [pc, #256]	@ (8001284 <vw_pll+0x198>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d05e      	beq.n	8001246 <vw_pll+0x15a>
			if (++vw_rx_bit_count >= 12) {
 8001188:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <vw_pll+0x19c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <vw_pll+0x19c>)
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	4b3c      	ldr	r3, [pc, #240]	@ (8001288 <vw_pll+0x19c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b0b      	cmp	r3, #11
 800119a:	d966      	bls.n	800126a <vw_pll+0x17e>
				uint8_t this_byte = (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <vw_pll+0x194>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff6f 	bl	800108c <vw_symbol_6to4>
 80011ae:	4603      	mov	r3, r0
 80011b0:	011b      	lsls	r3, r3, #4
						| vw_symbol_6to4(vw_rx_bits >> 6);
 80011b2:	b25c      	sxtb	r4, r3
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <vw_pll+0x194>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	099b      	lsrs	r3, r3, #6
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff64 	bl	800108c <vw_symbol_6to4>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	4323      	orrs	r3, r4
 80011ca:	b25b      	sxtb	r3, r3
				uint8_t this_byte = (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
 80011cc:	71fb      	strb	r3, [r7, #7]

				if (vw_rx_len == 0) {
 80011ce:	4b2f      	ldr	r3, [pc, #188]	@ (800128c <vw_pll+0x1a0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d114      	bne.n	8001202 <vw_pll+0x116>
					vw_rx_count = this_byte;
 80011d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <vw_pll+0x1a4>)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	7013      	strb	r3, [r2, #0]
					if (vw_rx_count < 4 || vw_rx_count > VW_MAX_MESSAGE_LEN) {
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <vw_pll+0x1a4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d903      	bls.n	80011ee <vw_pll+0x102>
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <vw_pll+0x1a4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b1e      	cmp	r3, #30
 80011ec:	d909      	bls.n	8001202 <vw_pll+0x116>
						vw_rx_active = false;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <vw_pll+0x198>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
						vw_rx_bad++;
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <vw_pll+0x1a8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <vw_pll+0x1a8>)
 80011fe:	701a      	strb	r2, [r3, #0]
						return;
 8001200:	e033      	b.n	800126a <vw_pll+0x17e>
					}
				}
				vw_rx_buf[vw_rx_len++] = this_byte;
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <vw_pll+0x1a0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	b2d1      	uxtb	r1, r2
 800120c:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <vw_pll+0x1a0>)
 800120e:	7011      	strb	r1, [r2, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <vw_pll+0x1ac>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	5453      	strb	r3, [r2, r1]

				if (vw_rx_len >= vw_rx_count) {
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <vw_pll+0x1a0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <vw_pll+0x1a4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d30b      	bcc.n	800123e <vw_pll+0x152>
					vw_rx_active = false;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <vw_pll+0x198>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
					vw_rx_good++;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <vw_pll+0x1b0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <vw_pll+0x1b0>)
 8001236:	701a      	strb	r2, [r3, #0]
					vw_rx_done = true;
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <vw_pll+0x1b4>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
				}
				vw_rx_bit_count = 0;
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <vw_pll+0x19c>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e011      	b.n	800126a <vw_pll+0x17e>
			}
		} else if (vw_rx_bits == 0xb38) {
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <vw_pll+0x194>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f640 3238 	movw	r2, #2872	@ 0xb38
 800124e:	4293      	cmp	r3, r2
 8001250:	d10b      	bne.n	800126a <vw_pll+0x17e>
			vw_rx_active = true;
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <vw_pll+0x198>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
			vw_rx_bit_count = 0;
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <vw_pll+0x19c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
			vw_rx_len = 0;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <vw_pll+0x1a0>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
			vw_rx_done = false;
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <vw_pll+0x1b4>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	200002c9 	.word	0x200002c9
 8001274:	200002cc 	.word	0x200002cc
 8001278:	200002ca 	.word	0x200002ca
 800127c:	200002cb 	.word	0x200002cb
 8001280:	200002d0 	.word	0x200002d0
 8001284:	200002cd 	.word	0x200002cd
 8001288:	200002d2 	.word	0x200002d2
 800128c:	200002f3 	.word	0x200002f3
 8001290:	200002f2 	.word	0x200002f2
 8001294:	200002f4 	.word	0x200002f4
 8001298:	200002d4 	.word	0x200002d4
 800129c:	200002f5 	.word	0x200002f5
 80012a0:	200002ce 	.word	0x200002ce

080012a4 <vw_tx_start>:




void vw_tx_start() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	vw_tx_index = 0;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <vw_tx_start+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	vw_tx_bit = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <vw_tx_start+0x44>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
	vw_tx_sample = 0;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <vw_tx_start+0x48>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(vw_ptt_port, vw_ptt_pin,
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <vw_tx_start+0x4c>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <vw_tx_start+0x50>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <vw_tx_start+0x54>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	f000 fce9 	bl	8001caa <HAL_GPIO_WritePin>
			vw_ptt_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET);
	vw_tx_enabled = true;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <vw_tx_start+0x58>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002c1 	.word	0x200002c1
 80012e8:	200002c2 	.word	0x200002c2
 80012ec:	200002c3 	.word	0x200002c3
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000054 	.word	0x20000054
 80012f8:	200002c8 	.word	0x200002c8
 80012fc:	200002c4 	.word	0x200002c4

08001300 <vw_tx_stop>:

void vw_tx_stop() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(vw_ptt_port, vw_ptt_pin,
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <vw_tx_stop+0x40>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <vw_tx_stop+0x44>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <vw_tx_stop+0x48>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	f000 fcc4 	bl	8001caa <HAL_GPIO_WritePin>
			vw_ptt_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(vw_tx_port, vw_tx_pin, GPIO_PIN_RESET);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <vw_tx_stop+0x4c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <vw_tx_stop+0x50>)
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4611      	mov	r1, r2
 800132c:	2200      	movs	r2, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fcbb 	bl	8001caa <HAL_GPIO_WritePin>
	vw_tx_enabled = false;
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <vw_tx_stop+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000054 	.word	0x20000054
 8001348:	200002c8 	.word	0x200002c8
 800134c:	20000004 	.word	0x20000004
 8001350:	20000056 	.word	0x20000056
 8001354:	200002c4 	.word	0x200002c4

08001358 <vw_timer_handler>:

// Add this function to be called from the timer interrupt
void vw_timer_handler(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	if (vw_rx_enabled && !vw_tx_enabled)
 800135c:	4b37      	ldr	r3, [pc, #220]	@ (800143c <vw_timer_handler+0xe4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d010      	beq.n	8001386 <vw_timer_handler+0x2e>
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <vw_timer_handler+0xe8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10b      	bne.n	8001386 <vw_timer_handler+0x2e>
		vw_rx_sample = HAL_GPIO_ReadPin(vw_rx_port, vw_rx_pin);
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <vw_timer_handler+0xec>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a35      	ldr	r2, [pc, #212]	@ (8001448 <vw_timer_handler+0xf0>)
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc7f 	bl	8001c7c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b32      	ldr	r3, [pc, #200]	@ (800144c <vw_timer_handler+0xf4>)
 8001384:	701a      	strb	r2, [r3, #0]

	// Transmitter code
	if (vw_tx_enabled && vw_tx_sample++ == 0) {
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <vw_timer_handler+0xe8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d041      	beq.n	8001414 <vw_timer_handler+0xbc>
 8001390:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <vw_timer_handler+0xf8>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	b2d1      	uxtb	r1, r2
 8001398:	4a2d      	ldr	r2, [pc, #180]	@ (8001450 <vw_timer_handler+0xf8>)
 800139a:	7011      	strb	r1, [r2, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d139      	bne.n	8001414 <vw_timer_handler+0xbc>
		if (vw_tx_index >= vw_tx_len) {
 80013a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <vw_timer_handler+0xfc>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <vw_timer_handler+0x100>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d308      	bcc.n	80013be <vw_timer_handler+0x66>
			vw_tx_stop();
 80013ac:	f7ff ffa8 	bl	8001300 <vw_tx_stop>
			vw_tx_msg_count++;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <vw_timer_handler+0x104>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b28      	ldr	r3, [pc, #160]	@ (800145c <vw_timer_handler+0x104>)
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	e02a      	b.n	8001414 <vw_timer_handler+0xbc>
		} else {
			HAL_GPIO_WritePin(vw_tx_port, vw_tx_pin,
 80013be:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <vw_timer_handler+0x108>)
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <vw_timer_handler+0x10c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461d      	mov	r5, r3
					(vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ?
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <vw_timer_handler+0xfc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <vw_timer_handler+0x110>)
 80013d0:	5c9b      	ldrb	r3, [r3, r2]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b25      	ldr	r3, [pc, #148]	@ (800146c <vw_timer_handler+0x114>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	b2d4      	uxtb	r4, r2
 80013dc:	4a23      	ldr	r2, [pc, #140]	@ (800146c <vw_timer_handler+0x114>)
 80013de:	7014      	strb	r4, [r2, #0]
 80013e0:	fa41 f303 	asr.w	r3, r1, r3
 80013e4:	f003 0301 	and.w	r3, r3, #1
			HAL_GPIO_WritePin(vw_tx_port, vw_tx_pin,
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	4629      	mov	r1, r5
 80013f6:	f000 fc58 	bl	8001caa <HAL_GPIO_WritePin>
							GPIO_PIN_SET : GPIO_PIN_RESET);
			if (vw_tx_bit >= 6) {
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <vw_timer_handler+0x114>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d908      	bls.n	8001414 <vw_timer_handler+0xbc>
				vw_tx_bit = 0;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <vw_timer_handler+0x114>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
				vw_tx_index++;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <vw_timer_handler+0xfc>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <vw_timer_handler+0xfc>)
 8001412:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (vw_tx_sample > 7)
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <vw_timer_handler+0xf8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b07      	cmp	r3, #7
 800141a:	d902      	bls.n	8001422 <vw_timer_handler+0xca>
		vw_tx_sample = 0;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <vw_timer_handler+0xf8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]

	// Receiver code
	if (vw_rx_enabled && !vw_tx_enabled)
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <vw_timer_handler+0xe4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <vw_timer_handler+0xe0>
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <vw_timer_handler+0xe8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <vw_timer_handler+0xe0>
		vw_pll();
 8001434:	f7ff fe5a 	bl	80010ec <vw_pll>
}
 8001438:	bf00      	nop
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	200002cf 	.word	0x200002cf
 8001440:	200002c4 	.word	0x200002c4
 8001444:	20000000 	.word	0x20000000
 8001448:	20000055 	.word	0x20000055
 800144c:	200002c9 	.word	0x200002c9
 8001450:	200002c3 	.word	0x200002c3
 8001454:	200002c1 	.word	0x200002c1
 8001458:	200002c0 	.word	0x200002c0
 800145c:	200002c6 	.word	0x200002c6
 8001460:	20000004 	.word	0x20000004
 8001464:	20000056 	.word	0x20000056
 8001468:	20000010 	.word	0x20000010
 800146c:	200002c2 	.word	0x200002c2

08001470 <vw_wait_tx>:

uint8_t vx_tx_active() {
	return vw_tx_enabled;
}

void vw_wait_tx() {
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	while (vw_tx_enabled)
 8001474:	bf00      	nop
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <vw_wait_tx+0x1c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1fa      	bne.n	8001476 <vw_wait_tx+0x6>
		;
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200002c4 	.word	0x200002c4

08001490 <vw_send>:
	while (!vw_rx_done && ((HAL_GetTick() - start) < milliseconds))
		;
	return vw_rx_done;
}

uint8_t vw_send(uint8_t *buf, uint8_t len) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
	uint8_t i, index = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	75bb      	strb	r3, [r7, #22]
	uint16_t crc = 0xffff;
 80014a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014a4:	82bb      	strh	r3, [r7, #20]
	uint8_t *p = vw_tx_buf + VW_HEADER_LEN;
 80014a6:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <vw_send+0x164>)
 80014a8:	613b      	str	r3, [r7, #16]
	uint8_t count = len + 3;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	3303      	adds	r3, #3
 80014ae:	73fb      	strb	r3, [r7, #15]
	if (len > VW_MAX_PAYLOAD)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b1b      	cmp	r3, #27
 80014b4:	d901      	bls.n	80014ba <vw_send+0x2a>
		return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e097      	b.n	80015ea <vw_send+0x15a>
	vw_wait_tx();
 80014ba:	f7ff ffd9 	bl	8001470 <vw_wait_tx>
	crc = _crc_ccitt_update(crc, count);
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	8abb      	ldrh	r3, [r7, #20]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fd8b 	bl	8000fe0 <_crc_ccitt_update>
 80014ca:	4603      	mov	r3, r0
 80014cc:	82bb      	strh	r3, [r7, #20]
	p[index++] = symbols[count >> 4];
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	75ba      	strb	r2, [r7, #22]
 80014dc:	461a      	mov	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a45      	ldr	r2, [pc, #276]	@ (80015f8 <vw_send+0x168>)
 80014e4:	5c52      	ldrb	r2, [r2, r1]
 80014e6:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[count & 0xf];
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f003 020f 	and.w	r2, r3, #15
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	1c59      	adds	r1, r3, #1
 80014f2:	75b9      	strb	r1, [r7, #22]
 80014f4:	4619      	mov	r1, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	440b      	add	r3, r1
 80014fa:	493f      	ldr	r1, [pc, #252]	@ (80015f8 <vw_send+0x168>)
 80014fc:	5c8a      	ldrb	r2, [r1, r2]
 80014fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]
 8001504:	e02c      	b.n	8001560 <vw_send+0xd0>
		crc = _crc_ccitt_update(crc, buf[i]);
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	8abb      	ldrh	r3, [r7, #20]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fd64 	bl	8000fe0 <_crc_ccitt_update>
 8001518:	4603      	mov	r3, r0
 800151a:	82bb      	strh	r3, [r7, #20]
		p[index++] = symbols[buf[i] >> 4];
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	75ba      	strb	r2, [r7, #22]
 8001530:	461a      	mov	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4413      	add	r3, r2
 8001536:	4a30      	ldr	r2, [pc, #192]	@ (80015f8 <vw_send+0x168>)
 8001538:	5c52      	ldrb	r2, [r2, r1]
 800153a:	701a      	strb	r2, [r3, #0]
		p[index++] = symbols[buf[i] & 0xf];
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	f003 020f 	and.w	r2, r3, #15
 8001548:	7dbb      	ldrb	r3, [r7, #22]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	75b9      	strb	r1, [r7, #22]
 800154e:	4619      	mov	r1, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	440b      	add	r3, r1
 8001554:	4928      	ldr	r1, [pc, #160]	@ (80015f8 <vw_send+0x168>)
 8001556:	5c8a      	ldrb	r2, [r1, r2]
 8001558:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	3301      	adds	r3, #1
 800155e:	75fb      	strb	r3, [r7, #23]
 8001560:	7dfa      	ldrb	r2, [r7, #23]
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	429a      	cmp	r2, r3
 8001566:	d3ce      	bcc.n	8001506 <vw_send+0x76>
	}
	crc = ~crc;
 8001568:	8abb      	ldrh	r3, [r7, #20]
 800156a:	43db      	mvns	r3, r3
 800156c:	82bb      	strh	r3, [r7, #20]
	p[index++] = symbols[(crc >> 4) & 0xf];
 800156e:	8abb      	ldrh	r3, [r7, #20]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	b29b      	uxth	r3, r3
 8001574:	f003 020f 	and.w	r2, r3, #15
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	1c59      	adds	r1, r3, #1
 800157c:	75b9      	strb	r1, [r7, #22]
 800157e:	4619      	mov	r1, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	440b      	add	r3, r1
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <vw_send+0x168>)
 8001586:	5c8a      	ldrb	r2, [r1, r2]
 8001588:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[crc & 0xf];
 800158a:	8abb      	ldrh	r3, [r7, #20]
 800158c:	f003 020f 	and.w	r2, r3, #15
 8001590:	7dbb      	ldrb	r3, [r7, #22]
 8001592:	1c59      	adds	r1, r3, #1
 8001594:	75b9      	strb	r1, [r7, #22]
 8001596:	4619      	mov	r1, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	440b      	add	r3, r1
 800159c:	4916      	ldr	r1, [pc, #88]	@ (80015f8 <vw_send+0x168>)
 800159e:	5c8a      	ldrb	r2, [r1, r2]
 80015a0:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[(crc >> 12) & 0xf];
 80015a2:	8abb      	ldrh	r3, [r7, #20]
 80015a4:	0b1b      	lsrs	r3, r3, #12
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	f003 020f 	and.w	r2, r3, #15
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	75b9      	strb	r1, [r7, #22]
 80015b2:	4619      	mov	r1, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	440b      	add	r3, r1
 80015b8:	490f      	ldr	r1, [pc, #60]	@ (80015f8 <vw_send+0x168>)
 80015ba:	5c8a      	ldrb	r2, [r1, r2]
 80015bc:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[(crc >> 8) & 0xf];
 80015be:	8abb      	ldrh	r3, [r7, #20]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f003 020f 	and.w	r2, r3, #15
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	75b9      	strb	r1, [r7, #22]
 80015ce:	4619      	mov	r1, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	440b      	add	r3, r1
 80015d4:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <vw_send+0x168>)
 80015d6:	5c8a      	ldrb	r2, [r1, r2]
 80015d8:	701a      	strb	r2, [r3, #0]
	vw_tx_len = index + VW_HEADER_LEN;
 80015da:	7dbb      	ldrb	r3, [r7, #22]
 80015dc:	3308      	adds	r3, #8
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <vw_send+0x16c>)
 80015e2:	701a      	strb	r2, [r3, #0]
	vw_tx_start();
 80015e4:	f7ff fe5e 	bl	80012a4 <vw_tx_start>
	return true;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000018 	.word	0x20000018
 80015f8:	20000058 	.word	0x20000058
 80015fc:	200002c0 	.word	0x200002c0

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff fc70 	bl	8000ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480b      	ldr	r0, [pc, #44]	@ (8001634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001606:	490c      	ldr	r1, [pc, #48]	@ (8001638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001608:	4a0c      	ldr	r2, [pc, #48]	@ (800163c <LoopFillZerobss+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800161c:	4c09      	ldr	r4, [pc, #36]	@ (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f002 f9e5 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fa95 	bl	8000b5c <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800163c:	08005a80 	.word	0x08005a80
  ldr r2, =_sbss
 8001640:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001644:	20000448 	.word	0x20000448

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f947 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fb12 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f95f 	bl	800195a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b4:	f000 f927 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	2000006c 	.word	0x2000006c
 80016d4:	20000068 	.word	0x20000068

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a03      	ldr	r2, [pc, #12]	@ (80016f8 <HAL_IncTick+0x20>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	2000006c 	.word	0x2000006c
 80016f8:	200002f8 	.word	0x200002f8

080016fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	@ (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	200002f8 	.word	0x200002f8

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fff0 	bl	80016fc <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffe0 	bl	80016fc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000006c 	.word	0x2000006c

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4906      	ldr	r1, [pc, #24]	@ (80017f0 <__NVIC_EnableIRQ+0x34>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	@ (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	@ 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d0:	f7ff ff90 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff2d 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff42 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff35 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b08b      	sub	sp, #44	@ 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e169      	b.n	8001c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001988:	2201      	movs	r2, #1
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8158 	bne.w	8001c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05e      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019b0:	4a98      	ldr	r2, [pc, #608]	@ (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d875      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019b6:	4a98      	ldr	r2, [pc, #608]	@ (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d058      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019bc:	4a96      	ldr	r2, [pc, #600]	@ (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d86f      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019c2:	4a96      	ldr	r2, [pc, #600]	@ (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d052      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019c8:	4a94      	ldr	r2, [pc, #592]	@ (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d869      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ce:	4a94      	ldr	r2, [pc, #592]	@ (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d04c      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019d4:	4a92      	ldr	r2, [pc, #584]	@ (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d863      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019da:	4a92      	ldr	r2, [pc, #584]	@ (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d046      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019e0:	4a90      	ldr	r2, [pc, #576]	@ (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d85d      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d82a      	bhi.n	8001a40 <HAL_GPIO_Init+0xcc>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d859      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ee:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <HAL_GPIO_Init+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001a5b 	.word	0x08001a5b
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001aa3 	.word	0x08001aa3
 8001a10:	08001aa3 	.word	0x08001aa3
 8001a14:	08001aa3 	.word	0x08001aa3
 8001a18:	08001aa3 	.word	0x08001aa3
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001aa3 	.word	0x08001aa3
 8001a30:	08001aa3 	.word	0x08001aa3
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	4a79      	ldr	r2, [pc, #484]	@ (8001c28 <HAL_GPIO_Init+0x2b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e024      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01f      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e01a      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e013      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          break;
 8001aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	@ 0xff
 8001aa8:	d801      	bhi.n	8001aae <HAL_GPIO_Init+0x13a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_Init+0x13e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	@ 0xff
 8001ab8:	d802      	bhi.n	8001ac0 <HAL_GPIO_Init+0x14c>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x152>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	3b08      	subs	r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	210f      	movs	r1, #15
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80b1 	beq.w	8001c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0c:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a40      	ldr	r2, [pc, #256]	@ (8001c34 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c38 <HAL_GPIO_Init+0x2c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1e8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3e      	ldr	r2, [pc, #248]	@ (8001c3c <HAL_GPIO_Init+0x2c8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c40 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1e0>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	492f      	ldr	r1, [pc, #188]	@ (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	492c      	ldr	r1, [pc, #176]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4928      	ldr	r1, [pc, #160]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4922      	ldr	r1, [pc, #136]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	491e      	ldr	r1, [pc, #120]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4918      	ldr	r1, [pc, #96]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4914      	ldr	r1, [pc, #80]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d021      	beq.n	8001c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e021      	b.n	8001c56 <HAL_GPIO_Init+0x2e2>
 8001c12:	bf00      	nop
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10220000 	.word	0x10220000
 8001c20:	10210000 	.word	0x10210000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_GPIO_Init+0x304>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	@ (8001c78 <HAL_GPIO_Init+0x304>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f ae8e 	bne.w	8001988 <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	372c      	adds	r7, #44	@ 0x2c
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cba:	787b      	ldrb	r3, [r7, #1]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cc6:	e003      	b.n	8001cd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e272      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cfc:	4b92      	ldr	r3, [pc, #584]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d00c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d08:	4b8f      	ldr	r3, [pc, #572]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d112      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5e>
 8001d14:	4b8c      	ldr	r3, [pc, #560]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d20:	d10b      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d22:	4b89      	ldr	r3, [pc, #548]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x12c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d168      	bne.n	8001e08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e24c      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x76>
 8001d44:	4b80      	ldr	r3, [pc, #512]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a7f      	ldr	r2, [pc, #508]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e02e      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b78      	ldr	r3, [pc, #480]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a77      	ldr	r2, [pc, #476]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0xbc>
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a71      	ldr	r2, [pc, #452]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d98:	4b6b      	ldr	r3, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a67      	ldr	r2, [pc, #412]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fca0 	bl	80016fc <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fc9c 	bl	80016fc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e200      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe4>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fc8c 	bl	80016fc <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fc88 	bl	80016fc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1ec      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x10c>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e16:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x18c>
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x176>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c0      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4939      	ldr	r1, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <HAL_RCC_OscConfig+0x270>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fc41 	bl	80016fc <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc3d 	bl	80016fc <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a1      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4927      	ldr	r1, [pc, #156]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <HAL_RCC_OscConfig+0x270>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc20 	bl	80016fc <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fc1c 	bl	80016fc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e180      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03a      	beq.n	8001f60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d019      	beq.n	8001f26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fc00 	bl	80016fc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff fbfc 	bl	80016fc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e160      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f000 fa9c 	bl	800245c <RCC_Delay>
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fbe6 	bl	80016fc <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f32:	e00f      	b.n	8001f54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fbe2 	bl	80016fc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d908      	bls.n	8001f54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e146      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	42420000 	.word	0x42420000
 8001f50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b92      	ldr	r3, [pc, #584]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e9      	bne.n	8001f34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a6 	beq.w	80020ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b8b      	ldr	r3, [pc, #556]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a87      	ldr	r2, [pc, #540]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b85      	ldr	r3, [pc, #532]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b82      	ldr	r3, [pc, #520]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7e      	ldr	r2, [pc, #504]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fba3 	bl	80016fc <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7ff fb9f 	bl	80016fc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	@ 0x64
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e103      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b75      	ldr	r3, [pc, #468]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x312>
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e02d      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x334>
 8001ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a69      	ldr	r2, [pc, #420]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b67      	ldr	r3, [pc, #412]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a66      	ldr	r2, [pc, #408]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x356>
 8002018:	4b61      	ldr	r3, [pc, #388]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a60      	ldr	r2, [pc, #384]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	4b5e      	ldr	r3, [pc, #376]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a5d      	ldr	r2, [pc, #372]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002032:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a57      	ldr	r2, [pc, #348]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fb53 	bl	80016fc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fb4f 	bl	80016fc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0b1      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	4b4b      	ldr	r3, [pc, #300]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x37e>
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7ff fb3d 	bl	80016fc <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff fb39 	bl	80016fc <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e09b      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	4b3c      	ldr	r3, [pc, #240]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d061      	beq.n	8002194 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d146      	bne.n	8002166 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff fb0d 	bl	80016fc <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff fb09 	bl	80016fc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e06d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f8:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210c:	d108      	bne.n	8002120 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4921      	ldr	r1, [pc, #132]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a19      	ldr	r1, [r3, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	430b      	orrs	r3, r1
 8002132:	491b      	ldr	r1, [pc, #108]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff fadd 	bl	80016fc <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff fad9 	bl	80016fc <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x46a>
 8002164:	e035      	b.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fac6 	bl	80016fc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fac2 	bl	80016fc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e026      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x498>
 8002192:	e01e      	b.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e019      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_OscConfig+0x500>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d0      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b67      	ldr	r3, [pc, #412]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4965      	ldr	r1, [pc, #404]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a58      	ldr	r2, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800225e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d040      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b41      	ldr	r3, [pc, #260]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e073      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4936      	ldr	r1, [pc, #216]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fa14 	bl	80016fc <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fa10 	bl	80016fc <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e053      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d210      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4922      	ldr	r1, [pc, #136]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f972 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	080056dc 	.word	0x080056dc
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	20000068 	.word	0x20000068

080023b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x30>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x36>
 80023e2:	e027      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	e027      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c5b      	lsrs	r3, r3, #17
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_RCC_GetSysClockFreq+0xa0>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	613b      	str	r3, [r7, #16]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002436:	613b      	str	r3, [r7, #16]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	693b      	ldr	r3, [r7, #16]
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	007a1200 	.word	0x007a1200
 8002450:	080056ec 	.word	0x080056ec
 8002454:	080056fc 	.word	0x080056fc
 8002458:	003d0900 	.word	0x003d0900

0800245c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <RCC_Delay+0x34>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <RCC_Delay+0x38>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002478:	bf00      	nop
  }
  while (Delay --);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <RCC_Delay+0x1c>
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	2000000c 	.word	0x2000000c
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fd6a 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fa5c 	bl	8002994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e03a      	b.n	80025c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <HAL_TIM_Base_Start_IT+0x98>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00e      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d009      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d111      	bne.n	80025b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d010      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	e007      	b.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40000800 	.word	0x40000800

080025dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d020      	beq.n	8002640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0202 	mvn.w	r2, #2
 8002610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f998 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f98b 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f99a 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d020      	beq.n	800268c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0204 	mvn.w	r2, #4
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f972 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f965 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f974 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d020      	beq.n	80026d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0208 	mvn.w	r2, #8
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2204      	movs	r2, #4
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f94c 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f93f 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f94e 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d020      	beq.n	8002724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0210 	mvn.w	r2, #16
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2208      	movs	r2, #8
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f926 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f919 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f928 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0201 	mvn.w	r2, #1
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fa8f 	bl	8000c66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa7f 	bl	8002c6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8f8 	bl	8002980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0220 	mvn.w	r2, #32
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa52 	bl	8002c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b4      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd4>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	f000 8086 	beq.w	800292e <HAL_TIM_ConfigClockSource+0x172>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b70      	cmp	r3, #112	@ 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa6>
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b60      	cmp	r3, #96	@ 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002834:	2b60      	cmp	r3, #96	@ 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b50      	cmp	r3, #80	@ 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xfa>
 800283c:	2b50      	cmp	r3, #80	@ 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b30      	cmp	r3, #48	@ 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b30      	cmp	r3, #48	@ 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	f000 f974 	bl	8002b5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
      break;
 800288e:	e04f      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	f000 f95d 	bl	8002b5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e03c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8d4 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	@ 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f92b 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028d4:	e02c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f8f2 	bl	8002acc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	@ 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f91b 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 80028f4:	e01c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f8b4 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	@ 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f90b 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 8002914:	e00c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 f902 	bl	8002b2a <TIM_ITRx_SetConfig>
      break;
 8002926:	e003      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e000      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800292e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
	...

08002994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2b      	ldr	r2, [pc, #172]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 030a 	bic.w	r3, r3, #10
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f043 0307 	orr.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	609a      	str	r2, [r3, #8]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e046      	b.n	8002c42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c00:	d009      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a12      	ldr	r2, [pc, #72]	@ (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10c      	bne.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <__cvt>:
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c82:	461d      	mov	r5, r3
 8002c84:	bfbb      	ittet	lt
 8002c86:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002c8a:	461d      	movlt	r5, r3
 8002c8c:	2300      	movge	r3, #0
 8002c8e:	232d      	movlt	r3, #45	@ 0x2d
 8002c90:	b088      	sub	sp, #32
 8002c92:	4614      	mov	r4, r2
 8002c94:	bfb8      	it	lt
 8002c96:	4614      	movlt	r4, r2
 8002c98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002c9a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002c9c:	7013      	strb	r3, [r2, #0]
 8002c9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ca0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ca4:	f023 0820 	bic.w	r8, r3, #32
 8002ca8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002cac:	d005      	beq.n	8002cba <__cvt+0x3e>
 8002cae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002cb2:	d100      	bne.n	8002cb6 <__cvt+0x3a>
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e000      	b.n	8002cbc <__cvt+0x40>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	aa07      	add	r2, sp, #28
 8002cbe:	9204      	str	r2, [sp, #16]
 8002cc0:	aa06      	add	r2, sp, #24
 8002cc2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002cc6:	e9cd 3600 	strd	r3, r6, [sp]
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f000 ff5f 	bl	8003b90 <_dtoa_r>
 8002cd2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002cd6:	4607      	mov	r7, r0
 8002cd8:	d119      	bne.n	8002d0e <__cvt+0x92>
 8002cda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002cdc:	07db      	lsls	r3, r3, #31
 8002cde:	d50e      	bpl.n	8002cfe <__cvt+0x82>
 8002ce0:	eb00 0906 	add.w	r9, r0, r6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8002cf0:	b108      	cbz	r0, 8002cf6 <__cvt+0x7a>
 8002cf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002cf6:	2230      	movs	r2, #48	@ 0x30
 8002cf8:	9b07      	ldr	r3, [sp, #28]
 8002cfa:	454b      	cmp	r3, r9
 8002cfc:	d31e      	bcc.n	8002d3c <__cvt+0xc0>
 8002cfe:	4638      	mov	r0, r7
 8002d00:	9b07      	ldr	r3, [sp, #28]
 8002d02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002d04:	1bdb      	subs	r3, r3, r7
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	b008      	add	sp, #32
 8002d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d0e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d12:	eb00 0906 	add.w	r9, r0, r6
 8002d16:	d1e5      	bne.n	8002ce4 <__cvt+0x68>
 8002d18:	7803      	ldrb	r3, [r0, #0]
 8002d1a:	2b30      	cmp	r3, #48	@ 0x30
 8002d1c:	d10a      	bne.n	8002d34 <__cvt+0xb8>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2300      	movs	r3, #0
 8002d22:	4620      	mov	r0, r4
 8002d24:	4629      	mov	r1, r5
 8002d26:	f7fd fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8002d2a:	b918      	cbnz	r0, 8002d34 <__cvt+0xb8>
 8002d2c:	f1c6 0601 	rsb	r6, r6, #1
 8002d30:	f8ca 6000 	str.w	r6, [sl]
 8002d34:	f8da 3000 	ldr.w	r3, [sl]
 8002d38:	4499      	add	r9, r3
 8002d3a:	e7d3      	b.n	8002ce4 <__cvt+0x68>
 8002d3c:	1c59      	adds	r1, r3, #1
 8002d3e:	9107      	str	r1, [sp, #28]
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e7d9      	b.n	8002cf8 <__cvt+0x7c>

08002d44 <__exponent>:
 8002d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d46:	2900      	cmp	r1, #0
 8002d48:	bfb6      	itet	lt
 8002d4a:	232d      	movlt	r3, #45	@ 0x2d
 8002d4c:	232b      	movge	r3, #43	@ 0x2b
 8002d4e:	4249      	neglt	r1, r1
 8002d50:	2909      	cmp	r1, #9
 8002d52:	7002      	strb	r2, [r0, #0]
 8002d54:	7043      	strb	r3, [r0, #1]
 8002d56:	dd29      	ble.n	8002dac <__exponent+0x68>
 8002d58:	f10d 0307 	add.w	r3, sp, #7
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	270a      	movs	r7, #10
 8002d60:	fbb1 f6f7 	udiv	r6, r1, r7
 8002d64:	461a      	mov	r2, r3
 8002d66:	fb07 1416 	mls	r4, r7, r6, r1
 8002d6a:	3430      	adds	r4, #48	@ 0x30
 8002d6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002d70:	460c      	mov	r4, r1
 8002d72:	2c63      	cmp	r4, #99	@ 0x63
 8002d74:	4631      	mov	r1, r6
 8002d76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002d7a:	dcf1      	bgt.n	8002d60 <__exponent+0x1c>
 8002d7c:	3130      	adds	r1, #48	@ 0x30
 8002d7e:	1e94      	subs	r4, r2, #2
 8002d80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d84:	4623      	mov	r3, r4
 8002d86:	1c41      	adds	r1, r0, #1
 8002d88:	42ab      	cmp	r3, r5
 8002d8a:	d30a      	bcc.n	8002da2 <__exponent+0x5e>
 8002d8c:	f10d 0309 	add.w	r3, sp, #9
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	42ac      	cmp	r4, r5
 8002d94:	bf88      	it	hi
 8002d96:	2300      	movhi	r3, #0
 8002d98:	3302      	adds	r3, #2
 8002d9a:	4403      	add	r3, r0
 8002d9c:	1a18      	subs	r0, r3, r0
 8002d9e:	b003      	add	sp, #12
 8002da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002da6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002daa:	e7ed      	b.n	8002d88 <__exponent+0x44>
 8002dac:	2330      	movs	r3, #48	@ 0x30
 8002dae:	3130      	adds	r1, #48	@ 0x30
 8002db0:	7083      	strb	r3, [r0, #2]
 8002db2:	70c1      	strb	r1, [r0, #3]
 8002db4:	1d03      	adds	r3, r0, #4
 8002db6:	e7f1      	b.n	8002d9c <__exponent+0x58>

08002db8 <_printf_float>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	b091      	sub	sp, #68	@ 0x44
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002dc4:	4616      	mov	r6, r2
 8002dc6:	461f      	mov	r7, r3
 8002dc8:	4605      	mov	r5, r0
 8002dca:	f000 fdc5 	bl	8003958 <_localeconv_r>
 8002dce:	6803      	ldr	r3, [r0, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	9308      	str	r3, [sp, #32]
 8002dd4:	f7fd f9bc 	bl	8000150 <strlen>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	930e      	str	r3, [sp, #56]	@ 0x38
 8002ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8002de0:	9009      	str	r0, [sp, #36]	@ 0x24
 8002de2:	3307      	adds	r3, #7
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	f103 0208 	add.w	r2, r3, #8
 8002dec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002df0:	f8d4 b000 	ldr.w	fp, [r4]
 8002df4:	f8c8 2000 	str.w	r2, [r8]
 8002df8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002dfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e02:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002e0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002e12:	4b9c      	ldr	r3, [pc, #624]	@ (8003084 <_printf_float+0x2cc>)
 8002e14:	f7fd fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8002e18:	bb70      	cbnz	r0, 8002e78 <_printf_float+0xc0>
 8002e1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e22:	4b98      	ldr	r3, [pc, #608]	@ (8003084 <_printf_float+0x2cc>)
 8002e24:	f7fd fdd4 	bl	80009d0 <__aeabi_dcmple>
 8002e28:	bb30      	cbnz	r0, 8002e78 <_printf_float+0xc0>
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4640      	mov	r0, r8
 8002e30:	4649      	mov	r1, r9
 8002e32:	f7fd fdc3 	bl	80009bc <__aeabi_dcmplt>
 8002e36:	b110      	cbz	r0, 8002e3e <_printf_float+0x86>
 8002e38:	232d      	movs	r3, #45	@ 0x2d
 8002e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e3e:	4a92      	ldr	r2, [pc, #584]	@ (8003088 <_printf_float+0x2d0>)
 8002e40:	4b92      	ldr	r3, [pc, #584]	@ (800308c <_printf_float+0x2d4>)
 8002e42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002e46:	bf94      	ite	ls
 8002e48:	4690      	movls	r8, r2
 8002e4a:	4698      	movhi	r8, r3
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f04f 0900 	mov.w	r9, #0
 8002e52:	6123      	str	r3, [r4, #16]
 8002e54:	f02b 0304 	bic.w	r3, fp, #4
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	4633      	mov	r3, r6
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	4628      	mov	r0, r5
 8002e60:	9700      	str	r7, [sp, #0]
 8002e62:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002e64:	f000 f9d4 	bl	8003210 <_printf_common>
 8002e68:	3001      	adds	r0, #1
 8002e6a:	f040 8090 	bne.w	8002f8e <_printf_float+0x1d6>
 8002e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e72:	b011      	add	sp, #68	@ 0x44
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	4642      	mov	r2, r8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	4640      	mov	r0, r8
 8002e7e:	4649      	mov	r1, r9
 8002e80:	f7fd fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8002e84:	b148      	cbz	r0, 8002e9a <_printf_float+0xe2>
 8002e86:	464b      	mov	r3, r9
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bfb8      	it	lt
 8002e8c:	232d      	movlt	r3, #45	@ 0x2d
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <_printf_float+0x2d8>)
 8002e90:	bfb8      	it	lt
 8002e92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002e96:	4b7f      	ldr	r3, [pc, #508]	@ (8003094 <_printf_float+0x2dc>)
 8002e98:	e7d3      	b.n	8002e42 <_printf_float+0x8a>
 8002e9a:	6863      	ldr	r3, [r4, #4]
 8002e9c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	d13f      	bne.n	8002f24 <_printf_float+0x16c>
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	6063      	str	r3, [r4, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	9206      	str	r2, [sp, #24]
 8002eb2:	aa0e      	add	r2, sp, #56	@ 0x38
 8002eb4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002eb8:	aa0d      	add	r2, sp, #52	@ 0x34
 8002eba:	9203      	str	r2, [sp, #12]
 8002ebc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002ec0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4628      	mov	r0, r5
 8002ecc:	464b      	mov	r3, r9
 8002ece:	910a      	str	r1, [sp, #40]	@ 0x28
 8002ed0:	f7ff fed4 	bl	8002c7c <__cvt>
 8002ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	2947      	cmp	r1, #71	@ 0x47
 8002eda:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002edc:	d128      	bne.n	8002f30 <_printf_float+0x178>
 8002ede:	1cc8      	adds	r0, r1, #3
 8002ee0:	db02      	blt.n	8002ee8 <_printf_float+0x130>
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	dd40      	ble.n	8002f6a <_printf_float+0x1b2>
 8002ee8:	f1aa 0a02 	sub.w	sl, sl, #2
 8002eec:	fa5f fa8a 	uxtb.w	sl, sl
 8002ef0:	4652      	mov	r2, sl
 8002ef2:	3901      	subs	r1, #1
 8002ef4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ef8:	910d      	str	r1, [sp, #52]	@ 0x34
 8002efa:	f7ff ff23 	bl	8002d44 <__exponent>
 8002efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f00:	4681      	mov	r9, r0
 8002f02:	1813      	adds	r3, r2, r0
 8002f04:	2a01      	cmp	r2, #1
 8002f06:	6123      	str	r3, [r4, #16]
 8002f08:	dc02      	bgt.n	8002f10 <_printf_float+0x158>
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	07d2      	lsls	r2, r2, #31
 8002f0e:	d501      	bpl.n	8002f14 <_printf_float+0x15c>
 8002f10:	3301      	adds	r3, #1
 8002f12:	6123      	str	r3, [r4, #16]
 8002f14:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d09e      	beq.n	8002e5a <_printf_float+0xa2>
 8002f1c:	232d      	movs	r3, #45	@ 0x2d
 8002f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f22:	e79a      	b.n	8002e5a <_printf_float+0xa2>
 8002f24:	2947      	cmp	r1, #71	@ 0x47
 8002f26:	d1bf      	bne.n	8002ea8 <_printf_float+0xf0>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1bd      	bne.n	8002ea8 <_printf_float+0xf0>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e7ba      	b.n	8002ea6 <_printf_float+0xee>
 8002f30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f34:	d9dc      	bls.n	8002ef0 <_printf_float+0x138>
 8002f36:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002f3a:	d118      	bne.n	8002f6e <_printf_float+0x1b6>
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	dd0b      	ble.n	8002f5a <_printf_float+0x1a2>
 8002f42:	6121      	str	r1, [r4, #16]
 8002f44:	b913      	cbnz	r3, 8002f4c <_printf_float+0x194>
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	07d0      	lsls	r0, r2, #31
 8002f4a:	d502      	bpl.n	8002f52 <_printf_float+0x19a>
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	440b      	add	r3, r1
 8002f50:	6123      	str	r3, [r4, #16]
 8002f52:	f04f 0900 	mov.w	r9, #0
 8002f56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002f58:	e7dc      	b.n	8002f14 <_printf_float+0x15c>
 8002f5a:	b913      	cbnz	r3, 8002f62 <_printf_float+0x1aa>
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	07d2      	lsls	r2, r2, #31
 8002f60:	d501      	bpl.n	8002f66 <_printf_float+0x1ae>
 8002f62:	3302      	adds	r3, #2
 8002f64:	e7f4      	b.n	8002f50 <_printf_float+0x198>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e7f2      	b.n	8002f50 <_printf_float+0x198>
 8002f6a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f70:	4299      	cmp	r1, r3
 8002f72:	db05      	blt.n	8002f80 <_printf_float+0x1c8>
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	6121      	str	r1, [r4, #16]
 8002f78:	07d8      	lsls	r0, r3, #31
 8002f7a:	d5ea      	bpl.n	8002f52 <_printf_float+0x19a>
 8002f7c:	1c4b      	adds	r3, r1, #1
 8002f7e:	e7e7      	b.n	8002f50 <_printf_float+0x198>
 8002f80:	2900      	cmp	r1, #0
 8002f82:	bfcc      	ite	gt
 8002f84:	2201      	movgt	r2, #1
 8002f86:	f1c1 0202 	rsble	r2, r1, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	e7e0      	b.n	8002f50 <_printf_float+0x198>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	055a      	lsls	r2, r3, #21
 8002f92:	d407      	bmi.n	8002fa4 <_printf_float+0x1ec>
 8002f94:	6923      	ldr	r3, [r4, #16]
 8002f96:	4642      	mov	r2, r8
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	47b8      	blx	r7
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d12b      	bne.n	8002ffa <_printf_float+0x242>
 8002fa2:	e764      	b.n	8002e6e <_printf_float+0xb6>
 8002fa4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fa8:	f240 80dc 	bls.w	8003164 <_printf_float+0x3ac>
 8002fac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f7fd fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d033      	beq.n	8003024 <_printf_float+0x26c>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	4a35      	ldr	r2, [pc, #212]	@ (8003098 <_printf_float+0x2e0>)
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	f43f af51 	beq.w	8002e6e <_printf_float+0xb6>
 8002fcc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002fd0:	4543      	cmp	r3, r8
 8002fd2:	db02      	blt.n	8002fda <_printf_float+0x222>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	07d8      	lsls	r0, r3, #31
 8002fd8:	d50f      	bpl.n	8002ffa <_printf_float+0x242>
 8002fda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fde:	4631      	mov	r1, r6
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	47b8      	blx	r7
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	f43f af42 	beq.w	8002e6e <_printf_float+0xb6>
 8002fea:	f04f 0900 	mov.w	r9, #0
 8002fee:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002ff2:	f104 0a1a 	add.w	sl, r4, #26
 8002ff6:	45c8      	cmp	r8, r9
 8002ff8:	dc09      	bgt.n	800300e <_printf_float+0x256>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	079b      	lsls	r3, r3, #30
 8002ffe:	f100 8102 	bmi.w	8003206 <_printf_float+0x44e>
 8003002:	68e0      	ldr	r0, [r4, #12]
 8003004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003006:	4298      	cmp	r0, r3
 8003008:	bfb8      	it	lt
 800300a:	4618      	movlt	r0, r3
 800300c:	e731      	b.n	8002e72 <_printf_float+0xba>
 800300e:	2301      	movs	r3, #1
 8003010:	4652      	mov	r2, sl
 8003012:	4631      	mov	r1, r6
 8003014:	4628      	mov	r0, r5
 8003016:	47b8      	blx	r7
 8003018:	3001      	adds	r0, #1
 800301a:	f43f af28 	beq.w	8002e6e <_printf_float+0xb6>
 800301e:	f109 0901 	add.w	r9, r9, #1
 8003022:	e7e8      	b.n	8002ff6 <_printf_float+0x23e>
 8003024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	dc38      	bgt.n	800309c <_printf_float+0x2e4>
 800302a:	2301      	movs	r3, #1
 800302c:	4631      	mov	r1, r6
 800302e:	4628      	mov	r0, r5
 8003030:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <_printf_float+0x2e0>)
 8003032:	47b8      	blx	r7
 8003034:	3001      	adds	r0, #1
 8003036:	f43f af1a 	beq.w	8002e6e <_printf_float+0xb6>
 800303a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800303e:	ea59 0303 	orrs.w	r3, r9, r3
 8003042:	d102      	bne.n	800304a <_printf_float+0x292>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	07d9      	lsls	r1, r3, #31
 8003048:	d5d7      	bpl.n	8002ffa <_printf_float+0x242>
 800304a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800304e:	4631      	mov	r1, r6
 8003050:	4628      	mov	r0, r5
 8003052:	47b8      	blx	r7
 8003054:	3001      	adds	r0, #1
 8003056:	f43f af0a 	beq.w	8002e6e <_printf_float+0xb6>
 800305a:	f04f 0a00 	mov.w	sl, #0
 800305e:	f104 0b1a 	add.w	fp, r4, #26
 8003062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003064:	425b      	negs	r3, r3
 8003066:	4553      	cmp	r3, sl
 8003068:	dc01      	bgt.n	800306e <_printf_float+0x2b6>
 800306a:	464b      	mov	r3, r9
 800306c:	e793      	b.n	8002f96 <_printf_float+0x1de>
 800306e:	2301      	movs	r3, #1
 8003070:	465a      	mov	r2, fp
 8003072:	4631      	mov	r1, r6
 8003074:	4628      	mov	r0, r5
 8003076:	47b8      	blx	r7
 8003078:	3001      	adds	r0, #1
 800307a:	f43f aef8 	beq.w	8002e6e <_printf_float+0xb6>
 800307e:	f10a 0a01 	add.w	sl, sl, #1
 8003082:	e7ee      	b.n	8003062 <_printf_float+0x2aa>
 8003084:	7fefffff 	.word	0x7fefffff
 8003088:	080056fe 	.word	0x080056fe
 800308c:	08005702 	.word	0x08005702
 8003090:	08005706 	.word	0x08005706
 8003094:	0800570a 	.word	0x0800570a
 8003098:	0800570e 	.word	0x0800570e
 800309c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800309e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80030a2:	4553      	cmp	r3, sl
 80030a4:	bfa8      	it	ge
 80030a6:	4653      	movge	r3, sl
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	4699      	mov	r9, r3
 80030ac:	dc36      	bgt.n	800311c <_printf_float+0x364>
 80030ae:	f04f 0b00 	mov.w	fp, #0
 80030b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030b6:	f104 021a 	add.w	r2, r4, #26
 80030ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80030be:	eba3 0309 	sub.w	r3, r3, r9
 80030c2:	455b      	cmp	r3, fp
 80030c4:	dc31      	bgt.n	800312a <_printf_float+0x372>
 80030c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030c8:	459a      	cmp	sl, r3
 80030ca:	dc3a      	bgt.n	8003142 <_printf_float+0x38a>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	07da      	lsls	r2, r3, #31
 80030d0:	d437      	bmi.n	8003142 <_printf_float+0x38a>
 80030d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030d4:	ebaa 0903 	sub.w	r9, sl, r3
 80030d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80030da:	ebaa 0303 	sub.w	r3, sl, r3
 80030de:	4599      	cmp	r9, r3
 80030e0:	bfa8      	it	ge
 80030e2:	4699      	movge	r9, r3
 80030e4:	f1b9 0f00 	cmp.w	r9, #0
 80030e8:	dc33      	bgt.n	8003152 <_printf_float+0x39a>
 80030ea:	f04f 0800 	mov.w	r8, #0
 80030ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030f2:	f104 0b1a 	add.w	fp, r4, #26
 80030f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030f8:	ebaa 0303 	sub.w	r3, sl, r3
 80030fc:	eba3 0309 	sub.w	r3, r3, r9
 8003100:	4543      	cmp	r3, r8
 8003102:	f77f af7a 	ble.w	8002ffa <_printf_float+0x242>
 8003106:	2301      	movs	r3, #1
 8003108:	465a      	mov	r2, fp
 800310a:	4631      	mov	r1, r6
 800310c:	4628      	mov	r0, r5
 800310e:	47b8      	blx	r7
 8003110:	3001      	adds	r0, #1
 8003112:	f43f aeac 	beq.w	8002e6e <_printf_float+0xb6>
 8003116:	f108 0801 	add.w	r8, r8, #1
 800311a:	e7ec      	b.n	80030f6 <_printf_float+0x33e>
 800311c:	4642      	mov	r2, r8
 800311e:	4631      	mov	r1, r6
 8003120:	4628      	mov	r0, r5
 8003122:	47b8      	blx	r7
 8003124:	3001      	adds	r0, #1
 8003126:	d1c2      	bne.n	80030ae <_printf_float+0x2f6>
 8003128:	e6a1      	b.n	8002e6e <_printf_float+0xb6>
 800312a:	2301      	movs	r3, #1
 800312c:	4631      	mov	r1, r6
 800312e:	4628      	mov	r0, r5
 8003130:	920a      	str	r2, [sp, #40]	@ 0x28
 8003132:	47b8      	blx	r7
 8003134:	3001      	adds	r0, #1
 8003136:	f43f ae9a 	beq.w	8002e6e <_printf_float+0xb6>
 800313a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800313c:	f10b 0b01 	add.w	fp, fp, #1
 8003140:	e7bb      	b.n	80030ba <_printf_float+0x302>
 8003142:	4631      	mov	r1, r6
 8003144:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003148:	4628      	mov	r0, r5
 800314a:	47b8      	blx	r7
 800314c:	3001      	adds	r0, #1
 800314e:	d1c0      	bne.n	80030d2 <_printf_float+0x31a>
 8003150:	e68d      	b.n	8002e6e <_printf_float+0xb6>
 8003152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003154:	464b      	mov	r3, r9
 8003156:	4631      	mov	r1, r6
 8003158:	4628      	mov	r0, r5
 800315a:	4442      	add	r2, r8
 800315c:	47b8      	blx	r7
 800315e:	3001      	adds	r0, #1
 8003160:	d1c3      	bne.n	80030ea <_printf_float+0x332>
 8003162:	e684      	b.n	8002e6e <_printf_float+0xb6>
 8003164:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003168:	f1ba 0f01 	cmp.w	sl, #1
 800316c:	dc01      	bgt.n	8003172 <_printf_float+0x3ba>
 800316e:	07db      	lsls	r3, r3, #31
 8003170:	d536      	bpl.n	80031e0 <_printf_float+0x428>
 8003172:	2301      	movs	r3, #1
 8003174:	4642      	mov	r2, r8
 8003176:	4631      	mov	r1, r6
 8003178:	4628      	mov	r0, r5
 800317a:	47b8      	blx	r7
 800317c:	3001      	adds	r0, #1
 800317e:	f43f ae76 	beq.w	8002e6e <_printf_float+0xb6>
 8003182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003186:	4631      	mov	r1, r6
 8003188:	4628      	mov	r0, r5
 800318a:	47b8      	blx	r7
 800318c:	3001      	adds	r0, #1
 800318e:	f43f ae6e 	beq.w	8002e6e <_printf_float+0xb6>
 8003192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800319e:	f7fd fc03 	bl	80009a8 <__aeabi_dcmpeq>
 80031a2:	b9c0      	cbnz	r0, 80031d6 <_printf_float+0x41e>
 80031a4:	4653      	mov	r3, sl
 80031a6:	f108 0201 	add.w	r2, r8, #1
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	d10c      	bne.n	80031ce <_printf_float+0x416>
 80031b4:	e65b      	b.n	8002e6e <_printf_float+0xb6>
 80031b6:	2301      	movs	r3, #1
 80031b8:	465a      	mov	r2, fp
 80031ba:	4631      	mov	r1, r6
 80031bc:	4628      	mov	r0, r5
 80031be:	47b8      	blx	r7
 80031c0:	3001      	adds	r0, #1
 80031c2:	f43f ae54 	beq.w	8002e6e <_printf_float+0xb6>
 80031c6:	f108 0801 	add.w	r8, r8, #1
 80031ca:	45d0      	cmp	r8, sl
 80031cc:	dbf3      	blt.n	80031b6 <_printf_float+0x3fe>
 80031ce:	464b      	mov	r3, r9
 80031d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80031d4:	e6e0      	b.n	8002f98 <_printf_float+0x1e0>
 80031d6:	f04f 0800 	mov.w	r8, #0
 80031da:	f104 0b1a 	add.w	fp, r4, #26
 80031de:	e7f4      	b.n	80031ca <_printf_float+0x412>
 80031e0:	2301      	movs	r3, #1
 80031e2:	4642      	mov	r2, r8
 80031e4:	e7e1      	b.n	80031aa <_printf_float+0x3f2>
 80031e6:	2301      	movs	r3, #1
 80031e8:	464a      	mov	r2, r9
 80031ea:	4631      	mov	r1, r6
 80031ec:	4628      	mov	r0, r5
 80031ee:	47b8      	blx	r7
 80031f0:	3001      	adds	r0, #1
 80031f2:	f43f ae3c 	beq.w	8002e6e <_printf_float+0xb6>
 80031f6:	f108 0801 	add.w	r8, r8, #1
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80031fe:	1a5b      	subs	r3, r3, r1
 8003200:	4543      	cmp	r3, r8
 8003202:	dcf0      	bgt.n	80031e6 <_printf_float+0x42e>
 8003204:	e6fd      	b.n	8003002 <_printf_float+0x24a>
 8003206:	f04f 0800 	mov.w	r8, #0
 800320a:	f104 0919 	add.w	r9, r4, #25
 800320e:	e7f4      	b.n	80031fa <_printf_float+0x442>

08003210 <_printf_common>:
 8003210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003214:	4616      	mov	r6, r2
 8003216:	4698      	mov	r8, r3
 8003218:	688a      	ldr	r2, [r1, #8]
 800321a:	690b      	ldr	r3, [r1, #16]
 800321c:	4607      	mov	r7, r0
 800321e:	4293      	cmp	r3, r2
 8003220:	bfb8      	it	lt
 8003222:	4613      	movlt	r3, r2
 8003224:	6033      	str	r3, [r6, #0]
 8003226:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800322a:	460c      	mov	r4, r1
 800322c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003230:	b10a      	cbz	r2, 8003236 <_printf_common+0x26>
 8003232:	3301      	adds	r3, #1
 8003234:	6033      	str	r3, [r6, #0]
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	0699      	lsls	r1, r3, #26
 800323a:	bf42      	ittt	mi
 800323c:	6833      	ldrmi	r3, [r6, #0]
 800323e:	3302      	addmi	r3, #2
 8003240:	6033      	strmi	r3, [r6, #0]
 8003242:	6825      	ldr	r5, [r4, #0]
 8003244:	f015 0506 	ands.w	r5, r5, #6
 8003248:	d106      	bne.n	8003258 <_printf_common+0x48>
 800324a:	f104 0a19 	add.w	sl, r4, #25
 800324e:	68e3      	ldr	r3, [r4, #12]
 8003250:	6832      	ldr	r2, [r6, #0]
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	42ab      	cmp	r3, r5
 8003256:	dc2b      	bgt.n	80032b0 <_printf_common+0xa0>
 8003258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	3b00      	subs	r3, #0
 8003260:	bf18      	it	ne
 8003262:	2301      	movne	r3, #1
 8003264:	0692      	lsls	r2, r2, #26
 8003266:	d430      	bmi.n	80032ca <_printf_common+0xba>
 8003268:	4641      	mov	r1, r8
 800326a:	4638      	mov	r0, r7
 800326c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003270:	47c8      	blx	r9
 8003272:	3001      	adds	r0, #1
 8003274:	d023      	beq.n	80032be <_printf_common+0xae>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	6922      	ldr	r2, [r4, #16]
 800327a:	f003 0306 	and.w	r3, r3, #6
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf14      	ite	ne
 8003282:	2500      	movne	r5, #0
 8003284:	6833      	ldreq	r3, [r6, #0]
 8003286:	f04f 0600 	mov.w	r6, #0
 800328a:	bf08      	it	eq
 800328c:	68e5      	ldreq	r5, [r4, #12]
 800328e:	f104 041a 	add.w	r4, r4, #26
 8003292:	bf08      	it	eq
 8003294:	1aed      	subeq	r5, r5, r3
 8003296:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800329a:	bf08      	it	eq
 800329c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bfc4      	itt	gt
 80032a4:	1a9b      	subgt	r3, r3, r2
 80032a6:	18ed      	addgt	r5, r5, r3
 80032a8:	42b5      	cmp	r5, r6
 80032aa:	d11a      	bne.n	80032e2 <_printf_common+0xd2>
 80032ac:	2000      	movs	r0, #0
 80032ae:	e008      	b.n	80032c2 <_printf_common+0xb2>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4652      	mov	r2, sl
 80032b4:	4641      	mov	r1, r8
 80032b6:	4638      	mov	r0, r7
 80032b8:	47c8      	blx	r9
 80032ba:	3001      	adds	r0, #1
 80032bc:	d103      	bne.n	80032c6 <_printf_common+0xb6>
 80032be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c6:	3501      	adds	r5, #1
 80032c8:	e7c1      	b.n	800324e <_printf_common+0x3e>
 80032ca:	2030      	movs	r0, #48	@ 0x30
 80032cc:	18e1      	adds	r1, r4, r3
 80032ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032d8:	4422      	add	r2, r4
 80032da:	3302      	adds	r3, #2
 80032dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032e0:	e7c2      	b.n	8003268 <_printf_common+0x58>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4622      	mov	r2, r4
 80032e6:	4641      	mov	r1, r8
 80032e8:	4638      	mov	r0, r7
 80032ea:	47c8      	blx	r9
 80032ec:	3001      	adds	r0, #1
 80032ee:	d0e6      	beq.n	80032be <_printf_common+0xae>
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7d9      	b.n	80032a8 <_printf_common+0x98>

080032f4 <_printf_i>:
 80032f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032f8:	7e0f      	ldrb	r7, [r1, #24]
 80032fa:	4691      	mov	r9, r2
 80032fc:	2f78      	cmp	r7, #120	@ 0x78
 80032fe:	4680      	mov	r8, r0
 8003300:	460c      	mov	r4, r1
 8003302:	469a      	mov	sl, r3
 8003304:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800330a:	d807      	bhi.n	800331c <_printf_i+0x28>
 800330c:	2f62      	cmp	r7, #98	@ 0x62
 800330e:	d80a      	bhi.n	8003326 <_printf_i+0x32>
 8003310:	2f00      	cmp	r7, #0
 8003312:	f000 80d3 	beq.w	80034bc <_printf_i+0x1c8>
 8003316:	2f58      	cmp	r7, #88	@ 0x58
 8003318:	f000 80ba 	beq.w	8003490 <_printf_i+0x19c>
 800331c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003324:	e03a      	b.n	800339c <_printf_i+0xa8>
 8003326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800332a:	2b15      	cmp	r3, #21
 800332c:	d8f6      	bhi.n	800331c <_printf_i+0x28>
 800332e:	a101      	add	r1, pc, #4	@ (adr r1, 8003334 <_printf_i+0x40>)
 8003330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003334:	0800338d 	.word	0x0800338d
 8003338:	080033a1 	.word	0x080033a1
 800333c:	0800331d 	.word	0x0800331d
 8003340:	0800331d 	.word	0x0800331d
 8003344:	0800331d 	.word	0x0800331d
 8003348:	0800331d 	.word	0x0800331d
 800334c:	080033a1 	.word	0x080033a1
 8003350:	0800331d 	.word	0x0800331d
 8003354:	0800331d 	.word	0x0800331d
 8003358:	0800331d 	.word	0x0800331d
 800335c:	0800331d 	.word	0x0800331d
 8003360:	080034a3 	.word	0x080034a3
 8003364:	080033cb 	.word	0x080033cb
 8003368:	0800345d 	.word	0x0800345d
 800336c:	0800331d 	.word	0x0800331d
 8003370:	0800331d 	.word	0x0800331d
 8003374:	080034c5 	.word	0x080034c5
 8003378:	0800331d 	.word	0x0800331d
 800337c:	080033cb 	.word	0x080033cb
 8003380:	0800331d 	.word	0x0800331d
 8003384:	0800331d 	.word	0x0800331d
 8003388:	08003465 	.word	0x08003465
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	1d1a      	adds	r2, r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6032      	str	r2, [r6, #0]
 8003394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800339c:	2301      	movs	r3, #1
 800339e:	e09e      	b.n	80034de <_printf_i+0x1ea>
 80033a0:	6833      	ldr	r3, [r6, #0]
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	1d19      	adds	r1, r3, #4
 80033a6:	6031      	str	r1, [r6, #0]
 80033a8:	0606      	lsls	r6, r0, #24
 80033aa:	d501      	bpl.n	80033b0 <_printf_i+0xbc>
 80033ac:	681d      	ldr	r5, [r3, #0]
 80033ae:	e003      	b.n	80033b8 <_printf_i+0xc4>
 80033b0:	0645      	lsls	r5, r0, #25
 80033b2:	d5fb      	bpl.n	80033ac <_printf_i+0xb8>
 80033b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	da03      	bge.n	80033c4 <_printf_i+0xd0>
 80033bc:	232d      	movs	r3, #45	@ 0x2d
 80033be:	426d      	negs	r5, r5
 80033c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033c4:	230a      	movs	r3, #10
 80033c6:	4859      	ldr	r0, [pc, #356]	@ (800352c <_printf_i+0x238>)
 80033c8:	e011      	b.n	80033ee <_printf_i+0xfa>
 80033ca:	6821      	ldr	r1, [r4, #0]
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	0608      	lsls	r0, r1, #24
 80033d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80033d4:	d402      	bmi.n	80033dc <_printf_i+0xe8>
 80033d6:	0649      	lsls	r1, r1, #25
 80033d8:	bf48      	it	mi
 80033da:	b2ad      	uxthmi	r5, r5
 80033dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	bf14      	ite	ne
 80033e2:	230a      	movne	r3, #10
 80033e4:	2308      	moveq	r3, #8
 80033e6:	4851      	ldr	r0, [pc, #324]	@ (800352c <_printf_i+0x238>)
 80033e8:	2100      	movs	r1, #0
 80033ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033ee:	6866      	ldr	r6, [r4, #4]
 80033f0:	2e00      	cmp	r6, #0
 80033f2:	bfa8      	it	ge
 80033f4:	6821      	ldrge	r1, [r4, #0]
 80033f6:	60a6      	str	r6, [r4, #8]
 80033f8:	bfa4      	itt	ge
 80033fa:	f021 0104 	bicge.w	r1, r1, #4
 80033fe:	6021      	strge	r1, [r4, #0]
 8003400:	b90d      	cbnz	r5, 8003406 <_printf_i+0x112>
 8003402:	2e00      	cmp	r6, #0
 8003404:	d04b      	beq.n	800349e <_printf_i+0x1aa>
 8003406:	4616      	mov	r6, r2
 8003408:	fbb5 f1f3 	udiv	r1, r5, r3
 800340c:	fb03 5711 	mls	r7, r3, r1, r5
 8003410:	5dc7      	ldrb	r7, [r0, r7]
 8003412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003416:	462f      	mov	r7, r5
 8003418:	42bb      	cmp	r3, r7
 800341a:	460d      	mov	r5, r1
 800341c:	d9f4      	bls.n	8003408 <_printf_i+0x114>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d10b      	bne.n	800343a <_printf_i+0x146>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	07df      	lsls	r7, r3, #31
 8003426:	d508      	bpl.n	800343a <_printf_i+0x146>
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	6861      	ldr	r1, [r4, #4]
 800342c:	4299      	cmp	r1, r3
 800342e:	bfde      	ittt	le
 8003430:	2330      	movle	r3, #48	@ 0x30
 8003432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003436:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800343a:	1b92      	subs	r2, r2, r6
 800343c:	6122      	str	r2, [r4, #16]
 800343e:	464b      	mov	r3, r9
 8003440:	4621      	mov	r1, r4
 8003442:	4640      	mov	r0, r8
 8003444:	f8cd a000 	str.w	sl, [sp]
 8003448:	aa03      	add	r2, sp, #12
 800344a:	f7ff fee1 	bl	8003210 <_printf_common>
 800344e:	3001      	adds	r0, #1
 8003450:	d14a      	bne.n	80034e8 <_printf_i+0x1f4>
 8003452:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003456:	b004      	add	sp, #16
 8003458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	2778      	movs	r7, #120	@ 0x78
 8003466:	4832      	ldr	r0, [pc, #200]	@ (8003530 <_printf_i+0x23c>)
 8003468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	6831      	ldr	r1, [r6, #0]
 8003470:	061f      	lsls	r7, r3, #24
 8003472:	f851 5b04 	ldr.w	r5, [r1], #4
 8003476:	d402      	bmi.n	800347e <_printf_i+0x18a>
 8003478:	065f      	lsls	r7, r3, #25
 800347a:	bf48      	it	mi
 800347c:	b2ad      	uxthmi	r5, r5
 800347e:	6031      	str	r1, [r6, #0]
 8003480:	07d9      	lsls	r1, r3, #31
 8003482:	bf44      	itt	mi
 8003484:	f043 0320 	orrmi.w	r3, r3, #32
 8003488:	6023      	strmi	r3, [r4, #0]
 800348a:	b11d      	cbz	r5, 8003494 <_printf_i+0x1a0>
 800348c:	2310      	movs	r3, #16
 800348e:	e7ab      	b.n	80033e8 <_printf_i+0xf4>
 8003490:	4826      	ldr	r0, [pc, #152]	@ (800352c <_printf_i+0x238>)
 8003492:	e7e9      	b.n	8003468 <_printf_i+0x174>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	f023 0320 	bic.w	r3, r3, #32
 800349a:	6023      	str	r3, [r4, #0]
 800349c:	e7f6      	b.n	800348c <_printf_i+0x198>
 800349e:	4616      	mov	r6, r2
 80034a0:	e7bd      	b.n	800341e <_printf_i+0x12a>
 80034a2:	6833      	ldr	r3, [r6, #0]
 80034a4:	6825      	ldr	r5, [r4, #0]
 80034a6:	1d18      	adds	r0, r3, #4
 80034a8:	6961      	ldr	r1, [r4, #20]
 80034aa:	6030      	str	r0, [r6, #0]
 80034ac:	062e      	lsls	r6, r5, #24
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	d501      	bpl.n	80034b6 <_printf_i+0x1c2>
 80034b2:	6019      	str	r1, [r3, #0]
 80034b4:	e002      	b.n	80034bc <_printf_i+0x1c8>
 80034b6:	0668      	lsls	r0, r5, #25
 80034b8:	d5fb      	bpl.n	80034b2 <_printf_i+0x1be>
 80034ba:	8019      	strh	r1, [r3, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	4616      	mov	r6, r2
 80034c0:	6123      	str	r3, [r4, #16]
 80034c2:	e7bc      	b.n	800343e <_printf_i+0x14a>
 80034c4:	6833      	ldr	r3, [r6, #0]
 80034c6:	2100      	movs	r1, #0
 80034c8:	1d1a      	adds	r2, r3, #4
 80034ca:	6032      	str	r2, [r6, #0]
 80034cc:	681e      	ldr	r6, [r3, #0]
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	4630      	mov	r0, r6
 80034d2:	f000 fab8 	bl	8003a46 <memchr>
 80034d6:	b108      	cbz	r0, 80034dc <_printf_i+0x1e8>
 80034d8:	1b80      	subs	r0, r0, r6
 80034da:	6060      	str	r0, [r4, #4]
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	2300      	movs	r3, #0
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034e6:	e7aa      	b.n	800343e <_printf_i+0x14a>
 80034e8:	4632      	mov	r2, r6
 80034ea:	4649      	mov	r1, r9
 80034ec:	4640      	mov	r0, r8
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	47d0      	blx	sl
 80034f2:	3001      	adds	r0, #1
 80034f4:	d0ad      	beq.n	8003452 <_printf_i+0x15e>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	079b      	lsls	r3, r3, #30
 80034fa:	d413      	bmi.n	8003524 <_printf_i+0x230>
 80034fc:	68e0      	ldr	r0, [r4, #12]
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	4298      	cmp	r0, r3
 8003502:	bfb8      	it	lt
 8003504:	4618      	movlt	r0, r3
 8003506:	e7a6      	b.n	8003456 <_printf_i+0x162>
 8003508:	2301      	movs	r3, #1
 800350a:	4632      	mov	r2, r6
 800350c:	4649      	mov	r1, r9
 800350e:	4640      	mov	r0, r8
 8003510:	47d0      	blx	sl
 8003512:	3001      	adds	r0, #1
 8003514:	d09d      	beq.n	8003452 <_printf_i+0x15e>
 8003516:	3501      	adds	r5, #1
 8003518:	68e3      	ldr	r3, [r4, #12]
 800351a:	9903      	ldr	r1, [sp, #12]
 800351c:	1a5b      	subs	r3, r3, r1
 800351e:	42ab      	cmp	r3, r5
 8003520:	dcf2      	bgt.n	8003508 <_printf_i+0x214>
 8003522:	e7eb      	b.n	80034fc <_printf_i+0x208>
 8003524:	2500      	movs	r5, #0
 8003526:	f104 0619 	add.w	r6, r4, #25
 800352a:	e7f5      	b.n	8003518 <_printf_i+0x224>
 800352c:	08005710 	.word	0x08005710
 8003530:	08005721 	.word	0x08005721

08003534 <std>:
 8003534:	2300      	movs	r3, #0
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	e9c0 3300 	strd	r3, r3, [r0]
 800353e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003542:	6083      	str	r3, [r0, #8]
 8003544:	8181      	strh	r1, [r0, #12]
 8003546:	6643      	str	r3, [r0, #100]	@ 0x64
 8003548:	81c2      	strh	r2, [r0, #14]
 800354a:	6183      	str	r3, [r0, #24]
 800354c:	4619      	mov	r1, r3
 800354e:	2208      	movs	r2, #8
 8003550:	305c      	adds	r0, #92	@ 0x5c
 8003552:	f000 f9f9 	bl	8003948 <memset>
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <std+0x58>)
 8003558:	6224      	str	r4, [r4, #32]
 800355a:	6263      	str	r3, [r4, #36]	@ 0x24
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <std+0x5c>)
 800355e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <std+0x60>)
 8003562:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003564:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <std+0x64>)
 8003566:	6323      	str	r3, [r4, #48]	@ 0x30
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <std+0x68>)
 800356a:	429c      	cmp	r4, r3
 800356c:	d006      	beq.n	800357c <std+0x48>
 800356e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003572:	4294      	cmp	r4, r2
 8003574:	d002      	beq.n	800357c <std+0x48>
 8003576:	33d0      	adds	r3, #208	@ 0xd0
 8003578:	429c      	cmp	r4, r3
 800357a:	d105      	bne.n	8003588 <std+0x54>
 800357c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003584:	f000 ba5c 	b.w	8003a40 <__retarget_lock_init_recursive>
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	08003799 	.word	0x08003799
 8003590:	080037bb 	.word	0x080037bb
 8003594:	080037f3 	.word	0x080037f3
 8003598:	08003817 	.word	0x08003817
 800359c:	200002fc 	.word	0x200002fc

080035a0 <stdio_exit_handler>:
 80035a0:	4a02      	ldr	r2, [pc, #8]	@ (80035ac <stdio_exit_handler+0xc>)
 80035a2:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <stdio_exit_handler+0x10>)
 80035a4:	4803      	ldr	r0, [pc, #12]	@ (80035b4 <stdio_exit_handler+0x14>)
 80035a6:	f000 b869 	b.w	800367c <_fwalk_sglue>
 80035aa:	bf00      	nop
 80035ac:	20000070 	.word	0x20000070
 80035b0:	0800539d 	.word	0x0800539d
 80035b4:	20000080 	.word	0x20000080

080035b8 <cleanup_stdio>:
 80035b8:	6841      	ldr	r1, [r0, #4]
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <cleanup_stdio+0x34>)
 80035bc:	b510      	push	{r4, lr}
 80035be:	4299      	cmp	r1, r3
 80035c0:	4604      	mov	r4, r0
 80035c2:	d001      	beq.n	80035c8 <cleanup_stdio+0x10>
 80035c4:	f001 feea 	bl	800539c <_fflush_r>
 80035c8:	68a1      	ldr	r1, [r4, #8]
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <cleanup_stdio+0x38>)
 80035cc:	4299      	cmp	r1, r3
 80035ce:	d002      	beq.n	80035d6 <cleanup_stdio+0x1e>
 80035d0:	4620      	mov	r0, r4
 80035d2:	f001 fee3 	bl	800539c <_fflush_r>
 80035d6:	68e1      	ldr	r1, [r4, #12]
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <cleanup_stdio+0x3c>)
 80035da:	4299      	cmp	r1, r3
 80035dc:	d004      	beq.n	80035e8 <cleanup_stdio+0x30>
 80035de:	4620      	mov	r0, r4
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f001 beda 	b.w	800539c <_fflush_r>
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	bf00      	nop
 80035ec:	200002fc 	.word	0x200002fc
 80035f0:	20000364 	.word	0x20000364
 80035f4:	200003cc 	.word	0x200003cc

080035f8 <global_stdio_init.part.0>:
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <global_stdio_init.part.0+0x30>)
 80035fc:	4c0b      	ldr	r4, [pc, #44]	@ (800362c <global_stdio_init.part.0+0x34>)
 80035fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003630 <global_stdio_init.part.0+0x38>)
 8003600:	4620      	mov	r0, r4
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	2104      	movs	r1, #4
 8003606:	2200      	movs	r2, #0
 8003608:	f7ff ff94 	bl	8003534 <std>
 800360c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003610:	2201      	movs	r2, #1
 8003612:	2109      	movs	r1, #9
 8003614:	f7ff ff8e 	bl	8003534 <std>
 8003618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800361c:	2202      	movs	r2, #2
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003622:	2112      	movs	r1, #18
 8003624:	f7ff bf86 	b.w	8003534 <std>
 8003628:	20000434 	.word	0x20000434
 800362c:	200002fc 	.word	0x200002fc
 8003630:	080035a1 	.word	0x080035a1

08003634 <__sfp_lock_acquire>:
 8003634:	4801      	ldr	r0, [pc, #4]	@ (800363c <__sfp_lock_acquire+0x8>)
 8003636:	f000 ba04 	b.w	8003a42 <__retarget_lock_acquire_recursive>
 800363a:	bf00      	nop
 800363c:	2000043d 	.word	0x2000043d

08003640 <__sfp_lock_release>:
 8003640:	4801      	ldr	r0, [pc, #4]	@ (8003648 <__sfp_lock_release+0x8>)
 8003642:	f000 b9ff 	b.w	8003a44 <__retarget_lock_release_recursive>
 8003646:	bf00      	nop
 8003648:	2000043d 	.word	0x2000043d

0800364c <__sinit>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	f7ff fff0 	bl	8003634 <__sfp_lock_acquire>
 8003654:	6a23      	ldr	r3, [r4, #32]
 8003656:	b11b      	cbz	r3, 8003660 <__sinit+0x14>
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365c:	f7ff bff0 	b.w	8003640 <__sfp_lock_release>
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <__sinit+0x28>)
 8003662:	6223      	str	r3, [r4, #32]
 8003664:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <__sinit+0x2c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f5      	bne.n	8003658 <__sinit+0xc>
 800366c:	f7ff ffc4 	bl	80035f8 <global_stdio_init.part.0>
 8003670:	e7f2      	b.n	8003658 <__sinit+0xc>
 8003672:	bf00      	nop
 8003674:	080035b9 	.word	0x080035b9
 8003678:	20000434 	.word	0x20000434

0800367c <_fwalk_sglue>:
 800367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003680:	4607      	mov	r7, r0
 8003682:	4688      	mov	r8, r1
 8003684:	4614      	mov	r4, r2
 8003686:	2600      	movs	r6, #0
 8003688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368c:	f1b9 0901 	subs.w	r9, r9, #1
 8003690:	d505      	bpl.n	800369e <_fwalk_sglue+0x22>
 8003692:	6824      	ldr	r4, [r4, #0]
 8003694:	2c00      	cmp	r4, #0
 8003696:	d1f7      	bne.n	8003688 <_fwalk_sglue+0xc>
 8003698:	4630      	mov	r0, r6
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d907      	bls.n	80036b4 <_fwalk_sglue+0x38>
 80036a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a8:	3301      	adds	r3, #1
 80036aa:	d003      	beq.n	80036b4 <_fwalk_sglue+0x38>
 80036ac:	4629      	mov	r1, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	4306      	orrs	r6, r0
 80036b4:	3568      	adds	r5, #104	@ 0x68
 80036b6:	e7e9      	b.n	800368c <_fwalk_sglue+0x10>

080036b8 <iprintf>:
 80036b8:	b40f      	push	{r0, r1, r2, r3}
 80036ba:	b507      	push	{r0, r1, r2, lr}
 80036bc:	4906      	ldr	r1, [pc, #24]	@ (80036d8 <iprintf+0x20>)
 80036be:	ab04      	add	r3, sp, #16
 80036c0:	6808      	ldr	r0, [r1, #0]
 80036c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c6:	6881      	ldr	r1, [r0, #8]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	f001 fccf 	bl	800506c <_vfiprintf_r>
 80036ce:	b003      	add	sp, #12
 80036d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d4:	b004      	add	sp, #16
 80036d6:	4770      	bx	lr
 80036d8:	2000007c 	.word	0x2000007c

080036dc <_puts_r>:
 80036dc:	6a03      	ldr	r3, [r0, #32]
 80036de:	b570      	push	{r4, r5, r6, lr}
 80036e0:	4605      	mov	r5, r0
 80036e2:	460e      	mov	r6, r1
 80036e4:	6884      	ldr	r4, [r0, #8]
 80036e6:	b90b      	cbnz	r3, 80036ec <_puts_r+0x10>
 80036e8:	f7ff ffb0 	bl	800364c <__sinit>
 80036ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d405      	bmi.n	80036fe <_puts_r+0x22>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	0598      	lsls	r0, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_puts_r+0x22>
 80036f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036fa:	f000 f9a2 	bl	8003a42 <__retarget_lock_acquire_recursive>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	0719      	lsls	r1, r3, #28
 8003702:	d502      	bpl.n	800370a <_puts_r+0x2e>
 8003704:	6923      	ldr	r3, [r4, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d135      	bne.n	8003776 <_puts_r+0x9a>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f8c5 	bl	800389c <__swsetup_r>
 8003712:	b380      	cbz	r0, 8003776 <_puts_r+0x9a>
 8003714:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800371a:	07da      	lsls	r2, r3, #31
 800371c:	d405      	bmi.n	800372a <_puts_r+0x4e>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	059b      	lsls	r3, r3, #22
 8003722:	d402      	bmi.n	800372a <_puts_r+0x4e>
 8003724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003726:	f000 f98d 	bl	8003a44 <__retarget_lock_release_recursive>
 800372a:	4628      	mov	r0, r5
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	2b00      	cmp	r3, #0
 8003730:	da04      	bge.n	800373c <_puts_r+0x60>
 8003732:	69a2      	ldr	r2, [r4, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	dc17      	bgt.n	8003768 <_puts_r+0x8c>
 8003738:	290a      	cmp	r1, #10
 800373a:	d015      	beq.n	8003768 <_puts_r+0x8c>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	6022      	str	r2, [r4, #0]
 8003742:	7019      	strb	r1, [r3, #0]
 8003744:	68a3      	ldr	r3, [r4, #8]
 8003746:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800374a:	3b01      	subs	r3, #1
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	2900      	cmp	r1, #0
 8003750:	d1ed      	bne.n	800372e <_puts_r+0x52>
 8003752:	2b00      	cmp	r3, #0
 8003754:	da11      	bge.n	800377a <_puts_r+0x9e>
 8003756:	4622      	mov	r2, r4
 8003758:	210a      	movs	r1, #10
 800375a:	4628      	mov	r0, r5
 800375c:	f000 f85f 	bl	800381e <__swbuf_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d0d7      	beq.n	8003714 <_puts_r+0x38>
 8003764:	250a      	movs	r5, #10
 8003766:	e7d7      	b.n	8003718 <_puts_r+0x3c>
 8003768:	4622      	mov	r2, r4
 800376a:	4628      	mov	r0, r5
 800376c:	f000 f857 	bl	800381e <__swbuf_r>
 8003770:	3001      	adds	r0, #1
 8003772:	d1e7      	bne.n	8003744 <_puts_r+0x68>
 8003774:	e7ce      	b.n	8003714 <_puts_r+0x38>
 8003776:	3e01      	subs	r6, #1
 8003778:	e7e4      	b.n	8003744 <_puts_r+0x68>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	6022      	str	r2, [r4, #0]
 8003780:	220a      	movs	r2, #10
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e7ee      	b.n	8003764 <_puts_r+0x88>
	...

08003788 <puts>:
 8003788:	4b02      	ldr	r3, [pc, #8]	@ (8003794 <puts+0xc>)
 800378a:	4601      	mov	r1, r0
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f7ff bfa5 	b.w	80036dc <_puts_r>
 8003792:	bf00      	nop
 8003794:	2000007c 	.word	0x2000007c

08003798 <__sread>:
 8003798:	b510      	push	{r4, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	f000 f900 	bl	80039a4 <_read_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	bfab      	itete	ge
 80037a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037aa:	89a3      	ldrhlt	r3, [r4, #12]
 80037ac:	181b      	addge	r3, r3, r0
 80037ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80037b2:	bfac      	ite	ge
 80037b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037b6:	81a3      	strhlt	r3, [r4, #12]
 80037b8:	bd10      	pop	{r4, pc}

080037ba <__swrite>:
 80037ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037be:	461f      	mov	r7, r3
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	4605      	mov	r5, r0
 80037c4:	05db      	lsls	r3, r3, #23
 80037c6:	460c      	mov	r4, r1
 80037c8:	4616      	mov	r6, r2
 80037ca:	d505      	bpl.n	80037d8 <__swrite+0x1e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	2200      	movs	r2, #0
 80037d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d4:	f000 f8d4 	bl	8003980 <_lseek_r>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	4632      	mov	r2, r6
 80037dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	4628      	mov	r0, r5
 80037e4:	463b      	mov	r3, r7
 80037e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ee:	f000 b8eb 	b.w	80039c8 <_write_r>

080037f2 <__sseek>:
 80037f2:	b510      	push	{r4, lr}
 80037f4:	460c      	mov	r4, r1
 80037f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fa:	f000 f8c1 	bl	8003980 <_lseek_r>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	bf15      	itete	ne
 8003804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800380a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800380e:	81a3      	strheq	r3, [r4, #12]
 8003810:	bf18      	it	ne
 8003812:	81a3      	strhne	r3, [r4, #12]
 8003814:	bd10      	pop	{r4, pc}

08003816 <__sclose>:
 8003816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381a:	f000 b8a1 	b.w	8003960 <_close_r>

0800381e <__swbuf_r>:
 800381e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003820:	460e      	mov	r6, r1
 8003822:	4614      	mov	r4, r2
 8003824:	4605      	mov	r5, r0
 8003826:	b118      	cbz	r0, 8003830 <__swbuf_r+0x12>
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	b90b      	cbnz	r3, 8003830 <__swbuf_r+0x12>
 800382c:	f7ff ff0e 	bl	800364c <__sinit>
 8003830:	69a3      	ldr	r3, [r4, #24]
 8003832:	60a3      	str	r3, [r4, #8]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	071a      	lsls	r2, r3, #28
 8003838:	d501      	bpl.n	800383e <__swbuf_r+0x20>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	b943      	cbnz	r3, 8003850 <__swbuf_r+0x32>
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f82b 	bl	800389c <__swsetup_r>
 8003846:	b118      	cbz	r0, 8003850 <__swbuf_r+0x32>
 8003848:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800384c:	4638      	mov	r0, r7
 800384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	6922      	ldr	r2, [r4, #16]
 8003854:	b2f6      	uxtb	r6, r6
 8003856:	1a98      	subs	r0, r3, r2
 8003858:	6963      	ldr	r3, [r4, #20]
 800385a:	4637      	mov	r7, r6
 800385c:	4283      	cmp	r3, r0
 800385e:	dc05      	bgt.n	800386c <__swbuf_r+0x4e>
 8003860:	4621      	mov	r1, r4
 8003862:	4628      	mov	r0, r5
 8003864:	f001 fd9a 	bl	800539c <_fflush_r>
 8003868:	2800      	cmp	r0, #0
 800386a:	d1ed      	bne.n	8003848 <__swbuf_r+0x2a>
 800386c:	68a3      	ldr	r3, [r4, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	60a3      	str	r3, [r4, #8]
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	6022      	str	r2, [r4, #0]
 8003878:	701e      	strb	r6, [r3, #0]
 800387a:	6962      	ldr	r2, [r4, #20]
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	429a      	cmp	r2, r3
 8003880:	d004      	beq.n	800388c <__swbuf_r+0x6e>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	07db      	lsls	r3, r3, #31
 8003886:	d5e1      	bpl.n	800384c <__swbuf_r+0x2e>
 8003888:	2e0a      	cmp	r6, #10
 800388a:	d1df      	bne.n	800384c <__swbuf_r+0x2e>
 800388c:	4621      	mov	r1, r4
 800388e:	4628      	mov	r0, r5
 8003890:	f001 fd84 	bl	800539c <_fflush_r>
 8003894:	2800      	cmp	r0, #0
 8003896:	d0d9      	beq.n	800384c <__swbuf_r+0x2e>
 8003898:	e7d6      	b.n	8003848 <__swbuf_r+0x2a>
	...

0800389c <__swsetup_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4b29      	ldr	r3, [pc, #164]	@ (8003944 <__swsetup_r+0xa8>)
 80038a0:	4605      	mov	r5, r0
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	460c      	mov	r4, r1
 80038a6:	b118      	cbz	r0, 80038b0 <__swsetup_r+0x14>
 80038a8:	6a03      	ldr	r3, [r0, #32]
 80038aa:	b90b      	cbnz	r3, 80038b0 <__swsetup_r+0x14>
 80038ac:	f7ff fece 	bl	800364c <__sinit>
 80038b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b4:	0719      	lsls	r1, r3, #28
 80038b6:	d422      	bmi.n	80038fe <__swsetup_r+0x62>
 80038b8:	06da      	lsls	r2, r3, #27
 80038ba:	d407      	bmi.n	80038cc <__swsetup_r+0x30>
 80038bc:	2209      	movs	r2, #9
 80038be:	602a      	str	r2, [r5, #0]
 80038c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	e033      	b.n	8003934 <__swsetup_r+0x98>
 80038cc:	0758      	lsls	r0, r3, #29
 80038ce:	d512      	bpl.n	80038f6 <__swsetup_r+0x5a>
 80038d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038d2:	b141      	cbz	r1, 80038e6 <__swsetup_r+0x4a>
 80038d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038d8:	4299      	cmp	r1, r3
 80038da:	d002      	beq.n	80038e2 <__swsetup_r+0x46>
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 ff1f 	bl	8004720 <_free_r>
 80038e2:	2300      	movs	r3, #0
 80038e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038ec:	81a3      	strh	r3, [r4, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	b94b      	cbnz	r3, 8003916 <__swsetup_r+0x7a>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d003      	beq.n	8003916 <__swsetup_r+0x7a>
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f001 fd90 	bl	8005436 <__smakebuf_r>
 8003916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391a:	f013 0201 	ands.w	r2, r3, #1
 800391e:	d00a      	beq.n	8003936 <__swsetup_r+0x9a>
 8003920:	2200      	movs	r2, #0
 8003922:	60a2      	str	r2, [r4, #8]
 8003924:	6962      	ldr	r2, [r4, #20]
 8003926:	4252      	negs	r2, r2
 8003928:	61a2      	str	r2, [r4, #24]
 800392a:	6922      	ldr	r2, [r4, #16]
 800392c:	b942      	cbnz	r2, 8003940 <__swsetup_r+0xa4>
 800392e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003932:	d1c5      	bne.n	80038c0 <__swsetup_r+0x24>
 8003934:	bd38      	pop	{r3, r4, r5, pc}
 8003936:	0799      	lsls	r1, r3, #30
 8003938:	bf58      	it	pl
 800393a:	6962      	ldrpl	r2, [r4, #20]
 800393c:	60a2      	str	r2, [r4, #8]
 800393e:	e7f4      	b.n	800392a <__swsetup_r+0x8e>
 8003940:	2000      	movs	r0, #0
 8003942:	e7f7      	b.n	8003934 <__swsetup_r+0x98>
 8003944:	2000007c 	.word	0x2000007c

08003948 <memset>:
 8003948:	4603      	mov	r3, r0
 800394a:	4402      	add	r2, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <_localeconv_r>:
 8003958:	4800      	ldr	r0, [pc, #0]	@ (800395c <_localeconv_r+0x4>)
 800395a:	4770      	bx	lr
 800395c:	200001bc 	.word	0x200001bc

08003960 <_close_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	2300      	movs	r3, #0
 8003964:	4d05      	ldr	r5, [pc, #20]	@ (800397c <_close_r+0x1c>)
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd fa53 	bl	8000e16 <_close>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_close_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_close_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000438 	.word	0x20000438

08003980 <_lseek_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	2200      	movs	r2, #0
 800398a:	4d05      	ldr	r5, [pc, #20]	@ (80039a0 <_lseek_r+0x20>)
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f7fd fa65 	bl	8000e5e <_lseek>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_lseek_r+0x1e>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_lseek_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	20000438 	.word	0x20000438

080039a4 <_read_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	4d05      	ldr	r5, [pc, #20]	@ (80039c4 <_read_r+0x20>)
 80039b0:	602a      	str	r2, [r5, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f7fd f9f6 	bl	8000da4 <_read>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_read_r+0x1e>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_read_r+0x1e>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20000438 	.word	0x20000438

080039c8 <_write_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4604      	mov	r4, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	2200      	movs	r2, #0
 80039d2:	4d05      	ldr	r5, [pc, #20]	@ (80039e8 <_write_r+0x20>)
 80039d4:	602a      	str	r2, [r5, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7fd fa01 	bl	8000dde <_write>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_write_r+0x1e>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_write_r+0x1e>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	20000438 	.word	0x20000438

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	@ (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000007c 	.word	0x2000007c

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	2600      	movs	r6, #0
 80039fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003a30 <__libc_init_array+0x38>)
 80039fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003a34 <__libc_init_array+0x3c>)
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	f001 fe34 	bl	8005674 <_init>
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	4d0a      	ldr	r5, [pc, #40]	@ (8003a38 <__libc_init_array+0x40>)
 8003a10:	4c0a      	ldr	r4, [pc, #40]	@ (8003a3c <__libc_init_array+0x44>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08005a78 	.word	0x08005a78
 8003a34:	08005a78 	.word	0x08005a78
 8003a38:	08005a78 	.word	0x08005a78
 8003a3c:	08005a7c 	.word	0x08005a7c

08003a40 <__retarget_lock_init_recursive>:
 8003a40:	4770      	bx	lr

08003a42 <__retarget_lock_acquire_recursive>:
 8003a42:	4770      	bx	lr

08003a44 <__retarget_lock_release_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <memchr>:
 8003a46:	4603      	mov	r3, r0
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	b2c9      	uxtb	r1, r1
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	d101      	bne.n	8003a58 <memchr+0x12>
 8003a54:	2000      	movs	r0, #0
 8003a56:	e003      	b.n	8003a60 <memchr+0x1a>
 8003a58:	7804      	ldrb	r4, [r0, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	428c      	cmp	r4, r1
 8003a5e:	d1f6      	bne.n	8003a4e <memchr+0x8>
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <memcpy>:
 8003a62:	440a      	add	r2, r1
 8003a64:	4291      	cmp	r1, r2
 8003a66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a6a:	d100      	bne.n	8003a6e <memcpy+0xc>
 8003a6c:	4770      	bx	lr
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a74:	4291      	cmp	r1, r2
 8003a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a7a:	d1f9      	bne.n	8003a70 <memcpy+0xe>
 8003a7c:	bd10      	pop	{r4, pc}

08003a7e <quorem>:
 8003a7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a82:	6903      	ldr	r3, [r0, #16]
 8003a84:	690c      	ldr	r4, [r1, #16]
 8003a86:	4607      	mov	r7, r0
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	db7e      	blt.n	8003b8a <quorem+0x10c>
 8003a8c:	3c01      	subs	r4, #1
 8003a8e:	00a3      	lsls	r3, r4, #2
 8003a90:	f100 0514 	add.w	r5, r0, #20
 8003a94:	f101 0814 	add.w	r8, r1, #20
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ab4:	d32e      	bcc.n	8003b14 <quorem+0x96>
 8003ab6:	f04f 0a00 	mov.w	sl, #0
 8003aba:	46c4      	mov	ip, r8
 8003abc:	46ae      	mov	lr, r5
 8003abe:	46d3      	mov	fp, sl
 8003ac0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ac4:	b298      	uxth	r0, r3
 8003ac6:	fb06 a000 	mla	r0, r6, r0, sl
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	0c02      	lsrs	r2, r0, #16
 8003ace:	fb06 2303 	mla	r3, r6, r3, r2
 8003ad2:	f8de 2000 	ldr.w	r2, [lr]
 8003ad6:	b280      	uxth	r0, r0
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	1a12      	subs	r2, r2, r0
 8003adc:	445a      	add	r2, fp
 8003ade:	f8de 0000 	ldr.w	r0, [lr]
 8003ae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003aec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003af0:	b292      	uxth	r2, r2
 8003af2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003af6:	45e1      	cmp	r9, ip
 8003af8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003afc:	f84e 2b04 	str.w	r2, [lr], #4
 8003b00:	d2de      	bcs.n	8003ac0 <quorem+0x42>
 8003b02:	9b00      	ldr	r3, [sp, #0]
 8003b04:	58eb      	ldr	r3, [r5, r3]
 8003b06:	b92b      	cbnz	r3, 8003b14 <quorem+0x96>
 8003b08:	9b01      	ldr	r3, [sp, #4]
 8003b0a:	3b04      	subs	r3, #4
 8003b0c:	429d      	cmp	r5, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	d32f      	bcc.n	8003b72 <quorem+0xf4>
 8003b12:	613c      	str	r4, [r7, #16]
 8003b14:	4638      	mov	r0, r7
 8003b16:	f001 f979 	bl	8004e0c <__mcmp>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	db25      	blt.n	8003b6a <quorem+0xec>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	2000      	movs	r0, #0
 8003b22:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b26:	f8d1 c000 	ldr.w	ip, [r1]
 8003b2a:	fa1f fe82 	uxth.w	lr, r2
 8003b2e:	fa1f f38c 	uxth.w	r3, ip
 8003b32:	eba3 030e 	sub.w	r3, r3, lr
 8003b36:	4403      	add	r3, r0
 8003b38:	0c12      	lsrs	r2, r2, #16
 8003b3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b48:	45c1      	cmp	r9, r8
 8003b4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b4e:	f841 3b04 	str.w	r3, [r1], #4
 8003b52:	d2e6      	bcs.n	8003b22 <quorem+0xa4>
 8003b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b5c:	b922      	cbnz	r2, 8003b68 <quorem+0xea>
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	429d      	cmp	r5, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	d30b      	bcc.n	8003b7e <quorem+0x100>
 8003b66:	613c      	str	r4, [r7, #16]
 8003b68:	3601      	adds	r6, #1
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	b003      	add	sp, #12
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	3b04      	subs	r3, #4
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d1cb      	bne.n	8003b12 <quorem+0x94>
 8003b7a:	3c01      	subs	r4, #1
 8003b7c:	e7c6      	b.n	8003b0c <quorem+0x8e>
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	3b04      	subs	r3, #4
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d1ef      	bne.n	8003b66 <quorem+0xe8>
 8003b86:	3c01      	subs	r4, #1
 8003b88:	e7ea      	b.n	8003b60 <quorem+0xe2>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e7ee      	b.n	8003b6c <quorem+0xee>
	...

08003b90 <_dtoa_r>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	69c7      	ldr	r7, [r0, #28]
 8003b9a:	b097      	sub	sp, #92	@ 0x5c
 8003b9c:	4683      	mov	fp, r0
 8003b9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ba2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003ba4:	b97f      	cbnz	r7, 8003bc6 <_dtoa_r+0x36>
 8003ba6:	2010      	movs	r0, #16
 8003ba8:	f000 fe02 	bl	80047b0 <malloc>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f8cb 001c 	str.w	r0, [fp, #28]
 8003bb2:	b920      	cbnz	r0, 8003bbe <_dtoa_r+0x2e>
 8003bb4:	21ef      	movs	r1, #239	@ 0xef
 8003bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8003e58 <_dtoa_r+0x2c8>)
 8003bb8:	48a8      	ldr	r0, [pc, #672]	@ (8003e5c <_dtoa_r+0x2cc>)
 8003bba:	f001 fcab 	bl	8005514 <__assert_func>
 8003bbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003bc2:	6007      	str	r7, [r0, #0]
 8003bc4:	60c7      	str	r7, [r0, #12]
 8003bc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	b159      	cbz	r1, 8003be6 <_dtoa_r+0x56>
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4093      	lsls	r3, r2
 8003bd4:	604a      	str	r2, [r1, #4]
 8003bd6:	608b      	str	r3, [r1, #8]
 8003bd8:	4658      	mov	r0, fp
 8003bda:	f000 fedf 	bl	800499c <_Bfree>
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	1e2b      	subs	r3, r5, #0
 8003be8:	bfaf      	iteee	ge
 8003bea:	2300      	movge	r3, #0
 8003bec:	2201      	movlt	r2, #1
 8003bee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	9303      	strlt	r3, [sp, #12]
 8003bf4:	bfa8      	it	ge
 8003bf6:	6033      	strge	r3, [r6, #0]
 8003bf8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003bfc:	4b98      	ldr	r3, [pc, #608]	@ (8003e60 <_dtoa_r+0x2d0>)
 8003bfe:	bfb8      	it	lt
 8003c00:	6032      	strlt	r2, [r6, #0]
 8003c02:	ea33 0308 	bics.w	r3, r3, r8
 8003c06:	d112      	bne.n	8003c2e <_dtoa_r+0x9e>
 8003c08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003c14:	4323      	orrs	r3, r4
 8003c16:	f000 8550 	beq.w	80046ba <_dtoa_r+0xb2a>
 8003c1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003e64 <_dtoa_r+0x2d4>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8552 	beq.w	80046ca <_dtoa_r+0xb3a>
 8003c26:	f10a 0303 	add.w	r3, sl, #3
 8003c2a:	f000 bd4c 	b.w	80046c6 <_dtoa_r+0xb36>
 8003c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f7fc feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8003c42:	4607      	mov	r7, r0
 8003c44:	b158      	cbz	r0, 8003c5e <_dtoa_r+0xce>
 8003c46:	2301      	movs	r3, #1
 8003c48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c4e:	b113      	cbz	r3, 8003c56 <_dtoa_r+0xc6>
 8003c50:	4b85      	ldr	r3, [pc, #532]	@ (8003e68 <_dtoa_r+0x2d8>)
 8003c52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003e6c <_dtoa_r+0x2dc>
 8003c5a:	f000 bd36 	b.w	80046ca <_dtoa_r+0xb3a>
 8003c5e:	ab14      	add	r3, sp, #80	@ 0x50
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	ab15      	add	r3, sp, #84	@ 0x54
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4658      	mov	r0, fp
 8003c68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c6c:	f001 f97e 	bl	8004f6c <__d2b>
 8003c70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c74:	4681      	mov	r9, r0
 8003c76:	2e00      	cmp	r6, #0
 8003c78:	d077      	beq.n	8003d6a <_dtoa_r+0x1da>
 8003c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c90:	9712      	str	r7, [sp, #72]	@ 0x48
 8003c92:	4619      	mov	r1, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	4b76      	ldr	r3, [pc, #472]	@ (8003e70 <_dtoa_r+0x2e0>)
 8003c98:	f7fc fa66 	bl	8000168 <__aeabi_dsub>
 8003c9c:	a368      	add	r3, pc, #416	@ (adr r3, 8003e40 <_dtoa_r+0x2b0>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f7fc fc19 	bl	80004d8 <__aeabi_dmul>
 8003ca6:	a368      	add	r3, pc, #416	@ (adr r3, 8003e48 <_dtoa_r+0x2b8>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fa5e 	bl	800016c <__adddf3>
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	f7fc fba5 	bl	8000404 <__aeabi_i2d>
 8003cba:	a365      	add	r3, pc, #404	@ (adr r3, 8003e50 <_dtoa_r+0x2c0>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fc0a 	bl	80004d8 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4620      	mov	r0, r4
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f7fc fa4e 	bl	800016c <__adddf3>
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	460d      	mov	r5, r1
 8003cd4:	f7fc feb0 	bl	8000a38 <__aeabi_d2iz>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4607      	mov	r7, r0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fe6b 	bl	80009bc <__aeabi_dcmplt>
 8003ce6:	b140      	cbz	r0, 8003cfa <_dtoa_r+0x16a>
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f7fc fb8b 	bl	8000404 <__aeabi_i2d>
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	f7fc fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8003cf6:	b900      	cbnz	r0, 8003cfa <_dtoa_r+0x16a>
 8003cf8:	3f01      	subs	r7, #1
 8003cfa:	2f16      	cmp	r7, #22
 8003cfc:	d853      	bhi.n	8003da6 <_dtoa_r+0x216>
 8003cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d02:	4b5c      	ldr	r3, [pc, #368]	@ (8003e74 <_dtoa_r+0x2e4>)
 8003d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fe56 	bl	80009bc <__aeabi_dcmplt>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d04a      	beq.n	8003daa <_dtoa_r+0x21a>
 8003d14:	2300      	movs	r3, #0
 8003d16:	3f01      	subs	r7, #1
 8003d18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	1e5a      	subs	r2, r3, #1
 8003d20:	bf46      	itte	mi
 8003d22:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d26:	2300      	movmi	r3, #0
 8003d28:	f04f 0800 	movpl.w	r8, #0
 8003d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d2e:	bf48      	it	mi
 8003d30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003d32:	2f00      	cmp	r7, #0
 8003d34:	db3b      	blt.n	8003dae <_dtoa_r+0x21e>
 8003d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d38:	970e      	str	r7, [sp, #56]	@ 0x38
 8003d3a:	443b      	add	r3, r7
 8003d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3e:	2300      	movs	r3, #0
 8003d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d866      	bhi.n	8003e16 <_dtoa_r+0x286>
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	bfc4      	itt	gt
 8003d4c:	3b04      	subgt	r3, #4
 8003d4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003d50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d52:	bfc8      	it	gt
 8003d54:	2400      	movgt	r4, #0
 8003d56:	f1a3 0302 	sub.w	r3, r3, #2
 8003d5a:	bfd8      	it	le
 8003d5c:	2401      	movle	r4, #1
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d864      	bhi.n	8003e2c <_dtoa_r+0x29c>
 8003d62:	e8df f003 	tbb	[pc, r3]
 8003d66:	382b      	.short	0x382b
 8003d68:	5636      	.short	0x5636
 8003d6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d6e:	441e      	add	r6, r3
 8003d70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	bfc1      	itttt	gt
 8003d78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d88:	bfd6      	itet	le
 8003d8a:	f1c3 0320 	rsble	r3, r3, #32
 8003d8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003d92:	fa04 f003 	lslle.w	r0, r4, r3
 8003d96:	f7fc fb25 	bl	80003e4 <__aeabi_ui2d>
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003da0:	3e01      	subs	r6, #1
 8003da2:	9212      	str	r2, [sp, #72]	@ 0x48
 8003da4:	e775      	b.n	8003c92 <_dtoa_r+0x102>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e7b6      	b.n	8003d18 <_dtoa_r+0x188>
 8003daa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003dac:	e7b5      	b.n	8003d1a <_dtoa_r+0x18a>
 8003dae:	427b      	negs	r3, r7
 8003db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003db2:	2300      	movs	r3, #0
 8003db4:	eba8 0807 	sub.w	r8, r8, r7
 8003db8:	930e      	str	r3, [sp, #56]	@ 0x38
 8003dba:	e7c2      	b.n	8003d42 <_dtoa_r+0x1b2>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	dc35      	bgt.n	8003e32 <_dtoa_r+0x2a2>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	461a      	mov	r2, r3
 8003dca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dce:	9221      	str	r2, [sp, #132]	@ 0x84
 8003dd0:	e00b      	b.n	8003dea <_dtoa_r+0x25a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7f3      	b.n	8003dbe <_dtoa_r+0x22e>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	9308      	str	r3, [sp, #32]
 8003de0:	3301      	adds	r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	9307      	str	r3, [sp, #28]
 8003de6:	bfb8      	it	lt
 8003de8:	2301      	movlt	r3, #1
 8003dea:	2100      	movs	r1, #0
 8003dec:	2204      	movs	r2, #4
 8003dee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003df2:	f102 0514 	add.w	r5, r2, #20
 8003df6:	429d      	cmp	r5, r3
 8003df8:	d91f      	bls.n	8003e3a <_dtoa_r+0x2aa>
 8003dfa:	6041      	str	r1, [r0, #4]
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	f000 fd8d 	bl	800491c <_Balloc>
 8003e02:	4682      	mov	sl, r0
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d139      	bne.n	8003e7c <_dtoa_r+0x2ec>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <_dtoa_r+0x2e8>)
 8003e10:	e6d2      	b.n	8003bb8 <_dtoa_r+0x28>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e7e0      	b.n	8003dd8 <_dtoa_r+0x248>
 8003e16:	2401      	movs	r4, #1
 8003e18:	2300      	movs	r3, #0
 8003e1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e22:	2200      	movs	r2, #0
 8003e24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e28:	2312      	movs	r3, #18
 8003e2a:	e7d0      	b.n	8003dce <_dtoa_r+0x23e>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e30:	e7f5      	b.n	8003e1e <_dtoa_r+0x28e>
 8003e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e38:	e7d7      	b.n	8003dea <_dtoa_r+0x25a>
 8003e3a:	3101      	adds	r1, #1
 8003e3c:	0052      	lsls	r2, r2, #1
 8003e3e:	e7d8      	b.n	8003df2 <_dtoa_r+0x262>
 8003e40:	636f4361 	.word	0x636f4361
 8003e44:	3fd287a7 	.word	0x3fd287a7
 8003e48:	8b60c8b3 	.word	0x8b60c8b3
 8003e4c:	3fc68a28 	.word	0x3fc68a28
 8003e50:	509f79fb 	.word	0x509f79fb
 8003e54:	3fd34413 	.word	0x3fd34413
 8003e58:	0800573f 	.word	0x0800573f
 8003e5c:	08005756 	.word	0x08005756
 8003e60:	7ff00000 	.word	0x7ff00000
 8003e64:	0800573b 	.word	0x0800573b
 8003e68:	0800570f 	.word	0x0800570f
 8003e6c:	0800570e 	.word	0x0800570e
 8003e70:	3ff80000 	.word	0x3ff80000
 8003e74:	08005850 	.word	0x08005850
 8003e78:	080057ae 	.word	0x080057ae
 8003e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003e80:	6018      	str	r0, [r3, #0]
 8003e82:	9b07      	ldr	r3, [sp, #28]
 8003e84:	2b0e      	cmp	r3, #14
 8003e86:	f200 80a4 	bhi.w	8003fd2 <_dtoa_r+0x442>
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	f000 80a1 	beq.w	8003fd2 <_dtoa_r+0x442>
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	dd33      	ble.n	8003efc <_dtoa_r+0x36c>
 8003e94:	4b86      	ldr	r3, [pc, #536]	@ (80040b0 <_dtoa_r+0x520>)
 8003e96:	f007 020f 	and.w	r2, r7, #15
 8003e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e9e:	05f8      	lsls	r0, r7, #23
 8003ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ea4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003eac:	d516      	bpl.n	8003edc <_dtoa_r+0x34c>
 8003eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eb2:	4b80      	ldr	r3, [pc, #512]	@ (80040b4 <_dtoa_r+0x524>)
 8003eb4:	2603      	movs	r6, #3
 8003eb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003eba:	f7fc fc37 	bl	800072c <__aeabi_ddiv>
 8003ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ec2:	f004 040f 	and.w	r4, r4, #15
 8003ec6:	4d7b      	ldr	r5, [pc, #492]	@ (80040b4 <_dtoa_r+0x524>)
 8003ec8:	b954      	cbnz	r4, 8003ee0 <_dtoa_r+0x350>
 8003eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed2:	f7fc fc2b 	bl	800072c <__aeabi_ddiv>
 8003ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eda:	e028      	b.n	8003f2e <_dtoa_r+0x39e>
 8003edc:	2602      	movs	r6, #2
 8003ede:	e7f2      	b.n	8003ec6 <_dtoa_r+0x336>
 8003ee0:	07e1      	lsls	r1, r4, #31
 8003ee2:	d508      	bpl.n	8003ef6 <_dtoa_r+0x366>
 8003ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003eec:	f7fc faf4 	bl	80004d8 <__aeabi_dmul>
 8003ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	1064      	asrs	r4, r4, #1
 8003ef8:	3508      	adds	r5, #8
 8003efa:	e7e5      	b.n	8003ec8 <_dtoa_r+0x338>
 8003efc:	f000 80d2 	beq.w	80040a4 <_dtoa_r+0x514>
 8003f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f04:	427c      	negs	r4, r7
 8003f06:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <_dtoa_r+0x520>)
 8003f08:	f004 020f 	and.w	r2, r4, #15
 8003f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fae0 	bl	80004d8 <__aeabi_dmul>
 8003f18:	2602      	movs	r6, #2
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f20:	4d64      	ldr	r5, [pc, #400]	@ (80040b4 <_dtoa_r+0x524>)
 8003f22:	1124      	asrs	r4, r4, #4
 8003f24:	2c00      	cmp	r4, #0
 8003f26:	f040 80b2 	bne.w	800408e <_dtoa_r+0x4fe>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d3      	bne.n	8003ed6 <_dtoa_r+0x346>
 8003f2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80b7 	beq.w	80040a8 <_dtoa_r+0x518>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4b5d      	ldr	r3, [pc, #372]	@ (80040b8 <_dtoa_r+0x528>)
 8003f42:	f7fc fd3b 	bl	80009bc <__aeabi_dcmplt>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f000 80ae 	beq.w	80040a8 <_dtoa_r+0x518>
 8003f4c:	9b07      	ldr	r3, [sp, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80aa 	beq.w	80040a8 <_dtoa_r+0x518>
 8003f54:	9b08      	ldr	r3, [sp, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dd37      	ble.n	8003fca <_dtoa_r+0x43a>
 8003f5a:	1e7b      	subs	r3, r7, #1
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	2200      	movs	r2, #0
 8003f62:	4629      	mov	r1, r5
 8003f64:	4b55      	ldr	r3, [pc, #340]	@ (80040bc <_dtoa_r+0x52c>)
 8003f66:	f7fc fab7 	bl	80004d8 <__aeabi_dmul>
 8003f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f6e:	9c08      	ldr	r4, [sp, #32]
 8003f70:	3601      	adds	r6, #1
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7fc fa46 	bl	8000404 <__aeabi_i2d>
 8003f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f7c:	f7fc faac 	bl	80004d8 <__aeabi_dmul>
 8003f80:	2200      	movs	r2, #0
 8003f82:	4b4f      	ldr	r3, [pc, #316]	@ (80040c0 <_dtoa_r+0x530>)
 8003f84:	f7fc f8f2 	bl	800016c <__adddf3>
 8003f88:	4605      	mov	r5, r0
 8003f8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f8e:	2c00      	cmp	r4, #0
 8003f90:	f040 809a 	bne.w	80040c8 <_dtoa_r+0x538>
 8003f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <_dtoa_r+0x534>)
 8003f9c:	f7fc f8e4 	bl	8000168 <__aeabi_dsub>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4633      	mov	r3, r6
 8003fac:	f7fc fd24 	bl	80009f8 <__aeabi_dcmpgt>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f040 828e 	bne.w	80044d2 <_dtoa_r+0x942>
 8003fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fba:	462a      	mov	r2, r5
 8003fbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003fc0:	f7fc fcfc 	bl	80009bc <__aeabi_dcmplt>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f040 8127 	bne.w	8004218 <_dtoa_r+0x688>
 8003fca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003fd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f2c0 8163 	blt.w	80042a0 <_dtoa_r+0x710>
 8003fda:	2f0e      	cmp	r7, #14
 8003fdc:	f300 8160 	bgt.w	80042a0 <_dtoa_r+0x710>
 8003fe0:	4b33      	ldr	r3, [pc, #204]	@ (80040b0 <_dtoa_r+0x520>)
 8003fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da03      	bge.n	8003ffc <_dtoa_r+0x46c>
 8003ff4:	9b07      	ldr	r3, [sp, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f340 8100 	ble.w	80041fc <_dtoa_r+0x66c>
 8003ffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004000:	4656      	mov	r6, sl
 8004002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fb8f 	bl	800072c <__aeabi_ddiv>
 800400e:	f7fc fd13 	bl	8000a38 <__aeabi_d2iz>
 8004012:	4680      	mov	r8, r0
 8004014:	f7fc f9f6 	bl	8000404 <__aeabi_i2d>
 8004018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401c:	f7fc fa5c 	bl	80004d8 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc f89e 	bl	8000168 <__aeabi_dsub>
 800402c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004030:	9d07      	ldr	r5, [sp, #28]
 8004032:	f806 4b01 	strb.w	r4, [r6], #1
 8004036:	eba6 040a 	sub.w	r4, r6, sl
 800403a:	42a5      	cmp	r5, r4
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	f040 8116 	bne.w	8004270 <_dtoa_r+0x6e0>
 8004044:	f7fc f892 	bl	800016c <__adddf3>
 8004048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404c:	4604      	mov	r4, r0
 800404e:	460d      	mov	r5, r1
 8004050:	f7fc fcd2 	bl	80009f8 <__aeabi_dcmpgt>
 8004054:	2800      	cmp	r0, #0
 8004056:	f040 80f8 	bne.w	800424a <_dtoa_r+0x6ba>
 800405a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc fca1 	bl	80009a8 <__aeabi_dcmpeq>
 8004066:	b118      	cbz	r0, 8004070 <_dtoa_r+0x4e0>
 8004068:	f018 0f01 	tst.w	r8, #1
 800406c:	f040 80ed 	bne.w	800424a <_dtoa_r+0x6ba>
 8004070:	4649      	mov	r1, r9
 8004072:	4658      	mov	r0, fp
 8004074:	f000 fc92 	bl	800499c <_Bfree>
 8004078:	2300      	movs	r3, #0
 800407a:	7033      	strb	r3, [r6, #0]
 800407c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800407e:	3701      	adds	r7, #1
 8004080:	601f      	str	r7, [r3, #0]
 8004082:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8320 	beq.w	80046ca <_dtoa_r+0xb3a>
 800408a:	601e      	str	r6, [r3, #0]
 800408c:	e31d      	b.n	80046ca <_dtoa_r+0xb3a>
 800408e:	07e2      	lsls	r2, r4, #31
 8004090:	d505      	bpl.n	800409e <_dtoa_r+0x50e>
 8004092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004096:	f7fc fa1f 	bl	80004d8 <__aeabi_dmul>
 800409a:	2301      	movs	r3, #1
 800409c:	3601      	adds	r6, #1
 800409e:	1064      	asrs	r4, r4, #1
 80040a0:	3508      	adds	r5, #8
 80040a2:	e73f      	b.n	8003f24 <_dtoa_r+0x394>
 80040a4:	2602      	movs	r6, #2
 80040a6:	e742      	b.n	8003f2e <_dtoa_r+0x39e>
 80040a8:	9c07      	ldr	r4, [sp, #28]
 80040aa:	9704      	str	r7, [sp, #16]
 80040ac:	e761      	b.n	8003f72 <_dtoa_r+0x3e2>
 80040ae:	bf00      	nop
 80040b0:	08005850 	.word	0x08005850
 80040b4:	08005828 	.word	0x08005828
 80040b8:	3ff00000 	.word	0x3ff00000
 80040bc:	40240000 	.word	0x40240000
 80040c0:	401c0000 	.word	0x401c0000
 80040c4:	40140000 	.word	0x40140000
 80040c8:	4b70      	ldr	r3, [pc, #448]	@ (800428c <_dtoa_r+0x6fc>)
 80040ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040d4:	4454      	add	r4, sl
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d045      	beq.n	8004166 <_dtoa_r+0x5d6>
 80040da:	2000      	movs	r0, #0
 80040dc:	496c      	ldr	r1, [pc, #432]	@ (8004290 <_dtoa_r+0x700>)
 80040de:	f7fc fb25 	bl	800072c <__aeabi_ddiv>
 80040e2:	4633      	mov	r3, r6
 80040e4:	462a      	mov	r2, r5
 80040e6:	f7fc f83f 	bl	8000168 <__aeabi_dsub>
 80040ea:	4656      	mov	r6, sl
 80040ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f4:	f7fc fca0 	bl	8000a38 <__aeabi_d2iz>
 80040f8:	4605      	mov	r5, r0
 80040fa:	f7fc f983 	bl	8000404 <__aeabi_i2d>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004106:	f7fc f82f 	bl	8000168 <__aeabi_dsub>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	3530      	adds	r5, #48	@ 0x30
 8004110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004118:	f806 5b01 	strb.w	r5, [r6], #1
 800411c:	f7fc fc4e 	bl	80009bc <__aeabi_dcmplt>
 8004120:	2800      	cmp	r0, #0
 8004122:	d163      	bne.n	80041ec <_dtoa_r+0x65c>
 8004124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004128:	2000      	movs	r0, #0
 800412a:	495a      	ldr	r1, [pc, #360]	@ (8004294 <_dtoa_r+0x704>)
 800412c:	f7fc f81c 	bl	8000168 <__aeabi_dsub>
 8004130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004134:	f7fc fc42 	bl	80009bc <__aeabi_dcmplt>
 8004138:	2800      	cmp	r0, #0
 800413a:	f040 8087 	bne.w	800424c <_dtoa_r+0x6bc>
 800413e:	42a6      	cmp	r6, r4
 8004140:	f43f af43 	beq.w	8003fca <_dtoa_r+0x43a>
 8004144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004148:	2200      	movs	r2, #0
 800414a:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <_dtoa_r+0x708>)
 800414c:	f7fc f9c4 	bl	80004d8 <__aeabi_dmul>
 8004150:	2200      	movs	r2, #0
 8004152:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800415a:	4b4f      	ldr	r3, [pc, #316]	@ (8004298 <_dtoa_r+0x708>)
 800415c:	f7fc f9bc 	bl	80004d8 <__aeabi_dmul>
 8004160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004164:	e7c4      	b.n	80040f0 <_dtoa_r+0x560>
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	f7fc f9b5 	bl	80004d8 <__aeabi_dmul>
 800416e:	4656      	mov	r6, sl
 8004170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004174:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800417a:	f7fc fc5d 	bl	8000a38 <__aeabi_d2iz>
 800417e:	4605      	mov	r5, r0
 8004180:	f7fc f940 	bl	8000404 <__aeabi_i2d>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800418c:	f7fb ffec 	bl	8000168 <__aeabi_dsub>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	3530      	adds	r5, #48	@ 0x30
 8004196:	f806 5b01 	strb.w	r5, [r6], #1
 800419a:	42a6      	cmp	r6, r4
 800419c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	d124      	bne.n	80041f0 <_dtoa_r+0x660>
 80041a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <_dtoa_r+0x700>)
 80041ac:	f7fb ffde 	bl	800016c <__adddf3>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b8:	f7fc fc1e 	bl	80009f8 <__aeabi_dcmpgt>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d145      	bne.n	800424c <_dtoa_r+0x6bc>
 80041c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041c4:	2000      	movs	r0, #0
 80041c6:	4932      	ldr	r1, [pc, #200]	@ (8004290 <_dtoa_r+0x700>)
 80041c8:	f7fb ffce 	bl	8000168 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d4:	f7fc fbf2 	bl	80009bc <__aeabi_dcmplt>
 80041d8:	2800      	cmp	r0, #0
 80041da:	f43f aef6 	beq.w	8003fca <_dtoa_r+0x43a>
 80041de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80041e0:	1e73      	subs	r3, r6, #1
 80041e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80041e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80041e8:	2b30      	cmp	r3, #48	@ 0x30
 80041ea:	d0f8      	beq.n	80041de <_dtoa_r+0x64e>
 80041ec:	9f04      	ldr	r7, [sp, #16]
 80041ee:	e73f      	b.n	8004070 <_dtoa_r+0x4e0>
 80041f0:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <_dtoa_r+0x708>)
 80041f2:	f7fc f971 	bl	80004d8 <__aeabi_dmul>
 80041f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041fa:	e7bc      	b.n	8004176 <_dtoa_r+0x5e6>
 80041fc:	d10c      	bne.n	8004218 <_dtoa_r+0x688>
 80041fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004202:	2200      	movs	r2, #0
 8004204:	4b25      	ldr	r3, [pc, #148]	@ (800429c <_dtoa_r+0x70c>)
 8004206:	f7fc f967 	bl	80004d8 <__aeabi_dmul>
 800420a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800420e:	f7fc fbe9 	bl	80009e4 <__aeabi_dcmpge>
 8004212:	2800      	cmp	r0, #0
 8004214:	f000 815b 	beq.w	80044ce <_dtoa_r+0x93e>
 8004218:	2400      	movs	r4, #0
 800421a:	4625      	mov	r5, r4
 800421c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800421e:	4656      	mov	r6, sl
 8004220:	43db      	mvns	r3, r3
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	2700      	movs	r7, #0
 8004226:	4621      	mov	r1, r4
 8004228:	4658      	mov	r0, fp
 800422a:	f000 fbb7 	bl	800499c <_Bfree>
 800422e:	2d00      	cmp	r5, #0
 8004230:	d0dc      	beq.n	80041ec <_dtoa_r+0x65c>
 8004232:	b12f      	cbz	r7, 8004240 <_dtoa_r+0x6b0>
 8004234:	42af      	cmp	r7, r5
 8004236:	d003      	beq.n	8004240 <_dtoa_r+0x6b0>
 8004238:	4639      	mov	r1, r7
 800423a:	4658      	mov	r0, fp
 800423c:	f000 fbae 	bl	800499c <_Bfree>
 8004240:	4629      	mov	r1, r5
 8004242:	4658      	mov	r0, fp
 8004244:	f000 fbaa 	bl	800499c <_Bfree>
 8004248:	e7d0      	b.n	80041ec <_dtoa_r+0x65c>
 800424a:	9704      	str	r7, [sp, #16]
 800424c:	4633      	mov	r3, r6
 800424e:	461e      	mov	r6, r3
 8004250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004254:	2a39      	cmp	r2, #57	@ 0x39
 8004256:	d107      	bne.n	8004268 <_dtoa_r+0x6d8>
 8004258:	459a      	cmp	sl, r3
 800425a:	d1f8      	bne.n	800424e <_dtoa_r+0x6be>
 800425c:	9a04      	ldr	r2, [sp, #16]
 800425e:	3201      	adds	r2, #1
 8004260:	9204      	str	r2, [sp, #16]
 8004262:	2230      	movs	r2, #48	@ 0x30
 8004264:	f88a 2000 	strb.w	r2, [sl]
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	3201      	adds	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e7bd      	b.n	80041ec <_dtoa_r+0x65c>
 8004270:	2200      	movs	r2, #0
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <_dtoa_r+0x708>)
 8004274:	f7fc f930 	bl	80004d8 <__aeabi_dmul>
 8004278:	2200      	movs	r2, #0
 800427a:	2300      	movs	r3, #0
 800427c:	4604      	mov	r4, r0
 800427e:	460d      	mov	r5, r1
 8004280:	f7fc fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8004284:	2800      	cmp	r0, #0
 8004286:	f43f aebc 	beq.w	8004002 <_dtoa_r+0x472>
 800428a:	e6f1      	b.n	8004070 <_dtoa_r+0x4e0>
 800428c:	08005850 	.word	0x08005850
 8004290:	3fe00000 	.word	0x3fe00000
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	40240000 	.word	0x40240000
 800429c:	40140000 	.word	0x40140000
 80042a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	f000 80db 	beq.w	800445e <_dtoa_r+0x8ce>
 80042a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80042aa:	2a01      	cmp	r2, #1
 80042ac:	f300 80bf 	bgt.w	800442e <_dtoa_r+0x89e>
 80042b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	f000 80b7 	beq.w	8004426 <_dtoa_r+0x896>
 80042b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80042bc:	4646      	mov	r6, r8
 80042be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042c2:	2101      	movs	r1, #1
 80042c4:	441a      	add	r2, r3
 80042c6:	4658      	mov	r0, fp
 80042c8:	4498      	add	r8, r3
 80042ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80042cc:	f000 fc1a 	bl	8004b04 <__i2b>
 80042d0:	4605      	mov	r5, r0
 80042d2:	b15e      	cbz	r6, 80042ec <_dtoa_r+0x75c>
 80042d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dd08      	ble.n	80042ec <_dtoa_r+0x75c>
 80042da:	42b3      	cmp	r3, r6
 80042dc:	bfa8      	it	ge
 80042de:	4633      	movge	r3, r6
 80042e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042e2:	eba8 0803 	sub.w	r8, r8, r3
 80042e6:	1af6      	subs	r6, r6, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ee:	b1f3      	cbz	r3, 800432e <_dtoa_r+0x79e>
 80042f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80b7 	beq.w	8004466 <_dtoa_r+0x8d6>
 80042f8:	b18c      	cbz	r4, 800431e <_dtoa_r+0x78e>
 80042fa:	4629      	mov	r1, r5
 80042fc:	4622      	mov	r2, r4
 80042fe:	4658      	mov	r0, fp
 8004300:	f000 fcbe 	bl	8004c80 <__pow5mult>
 8004304:	464a      	mov	r2, r9
 8004306:	4601      	mov	r1, r0
 8004308:	4605      	mov	r5, r0
 800430a:	4658      	mov	r0, fp
 800430c:	f000 fc10 	bl	8004b30 <__multiply>
 8004310:	4649      	mov	r1, r9
 8004312:	9004      	str	r0, [sp, #16]
 8004314:	4658      	mov	r0, fp
 8004316:	f000 fb41 	bl	800499c <_Bfree>
 800431a:	9b04      	ldr	r3, [sp, #16]
 800431c:	4699      	mov	r9, r3
 800431e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004320:	1b1a      	subs	r2, r3, r4
 8004322:	d004      	beq.n	800432e <_dtoa_r+0x79e>
 8004324:	4649      	mov	r1, r9
 8004326:	4658      	mov	r0, fp
 8004328:	f000 fcaa 	bl	8004c80 <__pow5mult>
 800432c:	4681      	mov	r9, r0
 800432e:	2101      	movs	r1, #1
 8004330:	4658      	mov	r0, fp
 8004332:	f000 fbe7 	bl	8004b04 <__i2b>
 8004336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004338:	4604      	mov	r4, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 81c9 	beq.w	80046d2 <_dtoa_r+0xb42>
 8004340:	461a      	mov	r2, r3
 8004342:	4601      	mov	r1, r0
 8004344:	4658      	mov	r0, fp
 8004346:	f000 fc9b 	bl	8004c80 <__pow5mult>
 800434a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800434c:	4604      	mov	r4, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	f300 808f 	bgt.w	8004472 <_dtoa_r+0x8e2>
 8004354:	9b02      	ldr	r3, [sp, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 8087 	bne.w	800446a <_dtoa_r+0x8da>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8083 	bne.w	800446e <_dtoa_r+0x8de>
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800436e:	0d1b      	lsrs	r3, r3, #20
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	b12b      	cbz	r3, 8004380 <_dtoa_r+0x7f0>
 8004374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004376:	f108 0801 	add.w	r8, r8, #1
 800437a:	3301      	adds	r3, #1
 800437c:	9309      	str	r3, [sp, #36]	@ 0x24
 800437e:	2301      	movs	r3, #1
 8004380:	930a      	str	r3, [sp, #40]	@ 0x28
 8004382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 81aa 	beq.w	80046de <_dtoa_r+0xb4e>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004390:	6918      	ldr	r0, [r3, #16]
 8004392:	f000 fb6b 	bl	8004a6c <__hi0bits>
 8004396:	f1c0 0020 	rsb	r0, r0, #32
 800439a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800439c:	4418      	add	r0, r3
 800439e:	f010 001f 	ands.w	r0, r0, #31
 80043a2:	d071      	beq.n	8004488 <_dtoa_r+0x8f8>
 80043a4:	f1c0 0320 	rsb	r3, r0, #32
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	dd65      	ble.n	8004478 <_dtoa_r+0x8e8>
 80043ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ae:	f1c0 001c 	rsb	r0, r0, #28
 80043b2:	4403      	add	r3, r0
 80043b4:	4480      	add	r8, r0
 80043b6:	4406      	add	r6, r0
 80043b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ba:	f1b8 0f00 	cmp.w	r8, #0
 80043be:	dd05      	ble.n	80043cc <_dtoa_r+0x83c>
 80043c0:	4649      	mov	r1, r9
 80043c2:	4642      	mov	r2, r8
 80043c4:	4658      	mov	r0, fp
 80043c6:	f000 fcb5 	bl	8004d34 <__lshift>
 80043ca:	4681      	mov	r9, r0
 80043cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	dd05      	ble.n	80043de <_dtoa_r+0x84e>
 80043d2:	4621      	mov	r1, r4
 80043d4:	461a      	mov	r2, r3
 80043d6:	4658      	mov	r0, fp
 80043d8:	f000 fcac 	bl	8004d34 <__lshift>
 80043dc:	4604      	mov	r4, r0
 80043de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d053      	beq.n	800448c <_dtoa_r+0x8fc>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4648      	mov	r0, r9
 80043e8:	f000 fd10 	bl	8004e0c <__mcmp>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	da4d      	bge.n	800448c <_dtoa_r+0x8fc>
 80043f0:	1e7b      	subs	r3, r7, #1
 80043f2:	4649      	mov	r1, r9
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	220a      	movs	r2, #10
 80043f8:	2300      	movs	r3, #0
 80043fa:	4658      	mov	r0, fp
 80043fc:	f000 faf0 	bl	80049e0 <__multadd>
 8004400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004402:	4681      	mov	r9, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 816c 	beq.w	80046e2 <_dtoa_r+0xb52>
 800440a:	2300      	movs	r3, #0
 800440c:	4629      	mov	r1, r5
 800440e:	220a      	movs	r2, #10
 8004410:	4658      	mov	r0, fp
 8004412:	f000 fae5 	bl	80049e0 <__multadd>
 8004416:	9b08      	ldr	r3, [sp, #32]
 8004418:	4605      	mov	r5, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	dc61      	bgt.n	80044e2 <_dtoa_r+0x952>
 800441e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004420:	2b02      	cmp	r3, #2
 8004422:	dc3b      	bgt.n	800449c <_dtoa_r+0x90c>
 8004424:	e05d      	b.n	80044e2 <_dtoa_r+0x952>
 8004426:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004428:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800442c:	e746      	b.n	80042bc <_dtoa_r+0x72c>
 800442e:	9b07      	ldr	r3, [sp, #28]
 8004430:	1e5c      	subs	r4, r3, #1
 8004432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004434:	42a3      	cmp	r3, r4
 8004436:	bfbf      	itttt	lt
 8004438:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800443a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800443c:	1ae3      	sublt	r3, r4, r3
 800443e:	18d2      	addlt	r2, r2, r3
 8004440:	bfa8      	it	ge
 8004442:	1b1c      	subge	r4, r3, r4
 8004444:	9b07      	ldr	r3, [sp, #28]
 8004446:	bfbe      	ittt	lt
 8004448:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800444a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800444c:	2400      	movlt	r4, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfb5      	itete	lt
 8004452:	eba8 0603 	sublt.w	r6, r8, r3
 8004456:	4646      	movge	r6, r8
 8004458:	2300      	movlt	r3, #0
 800445a:	9b07      	ldrge	r3, [sp, #28]
 800445c:	e730      	b.n	80042c0 <_dtoa_r+0x730>
 800445e:	4646      	mov	r6, r8
 8004460:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004462:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004464:	e735      	b.n	80042d2 <_dtoa_r+0x742>
 8004466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004468:	e75c      	b.n	8004324 <_dtoa_r+0x794>
 800446a:	2300      	movs	r3, #0
 800446c:	e788      	b.n	8004380 <_dtoa_r+0x7f0>
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	e786      	b.n	8004380 <_dtoa_r+0x7f0>
 8004472:	2300      	movs	r3, #0
 8004474:	930a      	str	r3, [sp, #40]	@ 0x28
 8004476:	e788      	b.n	800438a <_dtoa_r+0x7fa>
 8004478:	d09f      	beq.n	80043ba <_dtoa_r+0x82a>
 800447a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800447c:	331c      	adds	r3, #28
 800447e:	441a      	add	r2, r3
 8004480:	4498      	add	r8, r3
 8004482:	441e      	add	r6, r3
 8004484:	9209      	str	r2, [sp, #36]	@ 0x24
 8004486:	e798      	b.n	80043ba <_dtoa_r+0x82a>
 8004488:	4603      	mov	r3, r0
 800448a:	e7f6      	b.n	800447a <_dtoa_r+0x8ea>
 800448c:	9b07      	ldr	r3, [sp, #28]
 800448e:	9704      	str	r7, [sp, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	dc20      	bgt.n	80044d6 <_dtoa_r+0x946>
 8004494:	9308      	str	r3, [sp, #32]
 8004496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004498:	2b02      	cmp	r3, #2
 800449a:	dd1e      	ble.n	80044da <_dtoa_r+0x94a>
 800449c:	9b08      	ldr	r3, [sp, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f47f aebc 	bne.w	800421c <_dtoa_r+0x68c>
 80044a4:	4621      	mov	r1, r4
 80044a6:	2205      	movs	r2, #5
 80044a8:	4658      	mov	r0, fp
 80044aa:	f000 fa99 	bl	80049e0 <__multadd>
 80044ae:	4601      	mov	r1, r0
 80044b0:	4604      	mov	r4, r0
 80044b2:	4648      	mov	r0, r9
 80044b4:	f000 fcaa 	bl	8004e0c <__mcmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f77f aeaf 	ble.w	800421c <_dtoa_r+0x68c>
 80044be:	2331      	movs	r3, #49	@ 0x31
 80044c0:	4656      	mov	r6, sl
 80044c2:	f806 3b01 	strb.w	r3, [r6], #1
 80044c6:	9b04      	ldr	r3, [sp, #16]
 80044c8:	3301      	adds	r3, #1
 80044ca:	9304      	str	r3, [sp, #16]
 80044cc:	e6aa      	b.n	8004224 <_dtoa_r+0x694>
 80044ce:	9c07      	ldr	r4, [sp, #28]
 80044d0:	9704      	str	r7, [sp, #16]
 80044d2:	4625      	mov	r5, r4
 80044d4:	e7f3      	b.n	80044be <_dtoa_r+0x92e>
 80044d6:	9b07      	ldr	r3, [sp, #28]
 80044d8:	9308      	str	r3, [sp, #32]
 80044da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8104 	beq.w	80046ea <_dtoa_r+0xb5a>
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	dd05      	ble.n	80044f2 <_dtoa_r+0x962>
 80044e6:	4629      	mov	r1, r5
 80044e8:	4632      	mov	r2, r6
 80044ea:	4658      	mov	r0, fp
 80044ec:	f000 fc22 	bl	8004d34 <__lshift>
 80044f0:	4605      	mov	r5, r0
 80044f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05a      	beq.n	80045ae <_dtoa_r+0xa1e>
 80044f8:	4658      	mov	r0, fp
 80044fa:	6869      	ldr	r1, [r5, #4]
 80044fc:	f000 fa0e 	bl	800491c <_Balloc>
 8004500:	4606      	mov	r6, r0
 8004502:	b928      	cbnz	r0, 8004510 <_dtoa_r+0x980>
 8004504:	4602      	mov	r2, r0
 8004506:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800450a:	4b83      	ldr	r3, [pc, #524]	@ (8004718 <_dtoa_r+0xb88>)
 800450c:	f7ff bb54 	b.w	8003bb8 <_dtoa_r+0x28>
 8004510:	692a      	ldr	r2, [r5, #16]
 8004512:	f105 010c 	add.w	r1, r5, #12
 8004516:	3202      	adds	r2, #2
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	300c      	adds	r0, #12
 800451c:	f7ff faa1 	bl	8003a62 <memcpy>
 8004520:	2201      	movs	r2, #1
 8004522:	4631      	mov	r1, r6
 8004524:	4658      	mov	r0, fp
 8004526:	f000 fc05 	bl	8004d34 <__lshift>
 800452a:	462f      	mov	r7, r5
 800452c:	4605      	mov	r5, r0
 800452e:	f10a 0301 	add.w	r3, sl, #1
 8004532:	9307      	str	r3, [sp, #28]
 8004534:	9b08      	ldr	r3, [sp, #32]
 8004536:	4453      	add	r3, sl
 8004538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800453a:	9b02      	ldr	r3, [sp, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	930a      	str	r3, [sp, #40]	@ 0x28
 8004542:	9b07      	ldr	r3, [sp, #28]
 8004544:	4621      	mov	r1, r4
 8004546:	3b01      	subs	r3, #1
 8004548:	4648      	mov	r0, r9
 800454a:	9302      	str	r3, [sp, #8]
 800454c:	f7ff fa97 	bl	8003a7e <quorem>
 8004550:	4639      	mov	r1, r7
 8004552:	9008      	str	r0, [sp, #32]
 8004554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004558:	4648      	mov	r0, r9
 800455a:	f000 fc57 	bl	8004e0c <__mcmp>
 800455e:	462a      	mov	r2, r5
 8004560:	9009      	str	r0, [sp, #36]	@ 0x24
 8004562:	4621      	mov	r1, r4
 8004564:	4658      	mov	r0, fp
 8004566:	f000 fc6d 	bl	8004e44 <__mdiff>
 800456a:	68c2      	ldr	r2, [r0, #12]
 800456c:	4606      	mov	r6, r0
 800456e:	bb02      	cbnz	r2, 80045b2 <_dtoa_r+0xa22>
 8004570:	4601      	mov	r1, r0
 8004572:	4648      	mov	r0, r9
 8004574:	f000 fc4a 	bl	8004e0c <__mcmp>
 8004578:	4602      	mov	r2, r0
 800457a:	4631      	mov	r1, r6
 800457c:	4658      	mov	r0, fp
 800457e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004580:	f000 fa0c 	bl	800499c <_Bfree>
 8004584:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004586:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004588:	9e07      	ldr	r6, [sp, #28]
 800458a:	ea43 0102 	orr.w	r1, r3, r2
 800458e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004590:	4319      	orrs	r1, r3
 8004592:	d110      	bne.n	80045b6 <_dtoa_r+0xa26>
 8004594:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004598:	d029      	beq.n	80045ee <_dtoa_r+0xa5e>
 800459a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	dd02      	ble.n	80045a6 <_dtoa_r+0xa16>
 80045a0:	9b08      	ldr	r3, [sp, #32]
 80045a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	f883 8000 	strb.w	r8, [r3]
 80045ac:	e63b      	b.n	8004226 <_dtoa_r+0x696>
 80045ae:	4628      	mov	r0, r5
 80045b0:	e7bb      	b.n	800452a <_dtoa_r+0x99a>
 80045b2:	2201      	movs	r2, #1
 80045b4:	e7e1      	b.n	800457a <_dtoa_r+0x9ea>
 80045b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db04      	blt.n	80045c6 <_dtoa_r+0xa36>
 80045bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80045be:	430b      	orrs	r3, r1
 80045c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80045c2:	430b      	orrs	r3, r1
 80045c4:	d120      	bne.n	8004608 <_dtoa_r+0xa78>
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	dded      	ble.n	80045a6 <_dtoa_r+0xa16>
 80045ca:	4649      	mov	r1, r9
 80045cc:	2201      	movs	r2, #1
 80045ce:	4658      	mov	r0, fp
 80045d0:	f000 fbb0 	bl	8004d34 <__lshift>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4681      	mov	r9, r0
 80045d8:	f000 fc18 	bl	8004e0c <__mcmp>
 80045dc:	2800      	cmp	r0, #0
 80045de:	dc03      	bgt.n	80045e8 <_dtoa_r+0xa58>
 80045e0:	d1e1      	bne.n	80045a6 <_dtoa_r+0xa16>
 80045e2:	f018 0f01 	tst.w	r8, #1
 80045e6:	d0de      	beq.n	80045a6 <_dtoa_r+0xa16>
 80045e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045ec:	d1d8      	bne.n	80045a0 <_dtoa_r+0xa10>
 80045ee:	2339      	movs	r3, #57	@ 0x39
 80045f0:	9a02      	ldr	r2, [sp, #8]
 80045f2:	7013      	strb	r3, [r2, #0]
 80045f4:	4633      	mov	r3, r6
 80045f6:	461e      	mov	r6, r3
 80045f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	2a39      	cmp	r2, #57	@ 0x39
 8004600:	d052      	beq.n	80046a8 <_dtoa_r+0xb18>
 8004602:	3201      	adds	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e60e      	b.n	8004226 <_dtoa_r+0x696>
 8004608:	2a00      	cmp	r2, #0
 800460a:	dd07      	ble.n	800461c <_dtoa_r+0xa8c>
 800460c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004610:	d0ed      	beq.n	80045ee <_dtoa_r+0xa5e>
 8004612:	9a02      	ldr	r2, [sp, #8]
 8004614:	f108 0301 	add.w	r3, r8, #1
 8004618:	7013      	strb	r3, [r2, #0]
 800461a:	e604      	b.n	8004226 <_dtoa_r+0x696>
 800461c:	9b07      	ldr	r3, [sp, #28]
 800461e:	9a07      	ldr	r2, [sp, #28]
 8004620:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004626:	4293      	cmp	r3, r2
 8004628:	d028      	beq.n	800467c <_dtoa_r+0xaec>
 800462a:	4649      	mov	r1, r9
 800462c:	2300      	movs	r3, #0
 800462e:	220a      	movs	r2, #10
 8004630:	4658      	mov	r0, fp
 8004632:	f000 f9d5 	bl	80049e0 <__multadd>
 8004636:	42af      	cmp	r7, r5
 8004638:	4681      	mov	r9, r0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f04f 020a 	mov.w	r2, #10
 8004642:	4639      	mov	r1, r7
 8004644:	4658      	mov	r0, fp
 8004646:	d107      	bne.n	8004658 <_dtoa_r+0xac8>
 8004648:	f000 f9ca 	bl	80049e0 <__multadd>
 800464c:	4607      	mov	r7, r0
 800464e:	4605      	mov	r5, r0
 8004650:	9b07      	ldr	r3, [sp, #28]
 8004652:	3301      	adds	r3, #1
 8004654:	9307      	str	r3, [sp, #28]
 8004656:	e774      	b.n	8004542 <_dtoa_r+0x9b2>
 8004658:	f000 f9c2 	bl	80049e0 <__multadd>
 800465c:	4629      	mov	r1, r5
 800465e:	4607      	mov	r7, r0
 8004660:	2300      	movs	r3, #0
 8004662:	220a      	movs	r2, #10
 8004664:	4658      	mov	r0, fp
 8004666:	f000 f9bb 	bl	80049e0 <__multadd>
 800466a:	4605      	mov	r5, r0
 800466c:	e7f0      	b.n	8004650 <_dtoa_r+0xac0>
 800466e:	9b08      	ldr	r3, [sp, #32]
 8004670:	2700      	movs	r7, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfcc      	ite	gt
 8004676:	461e      	movgt	r6, r3
 8004678:	2601      	movle	r6, #1
 800467a:	4456      	add	r6, sl
 800467c:	4649      	mov	r1, r9
 800467e:	2201      	movs	r2, #1
 8004680:	4658      	mov	r0, fp
 8004682:	f000 fb57 	bl	8004d34 <__lshift>
 8004686:	4621      	mov	r1, r4
 8004688:	4681      	mov	r9, r0
 800468a:	f000 fbbf 	bl	8004e0c <__mcmp>
 800468e:	2800      	cmp	r0, #0
 8004690:	dcb0      	bgt.n	80045f4 <_dtoa_r+0xa64>
 8004692:	d102      	bne.n	800469a <_dtoa_r+0xb0a>
 8004694:	f018 0f01 	tst.w	r8, #1
 8004698:	d1ac      	bne.n	80045f4 <_dtoa_r+0xa64>
 800469a:	4633      	mov	r3, r6
 800469c:	461e      	mov	r6, r3
 800469e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046a2:	2a30      	cmp	r2, #48	@ 0x30
 80046a4:	d0fa      	beq.n	800469c <_dtoa_r+0xb0c>
 80046a6:	e5be      	b.n	8004226 <_dtoa_r+0x696>
 80046a8:	459a      	cmp	sl, r3
 80046aa:	d1a4      	bne.n	80045f6 <_dtoa_r+0xa66>
 80046ac:	9b04      	ldr	r3, [sp, #16]
 80046ae:	3301      	adds	r3, #1
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	2331      	movs	r3, #49	@ 0x31
 80046b4:	f88a 3000 	strb.w	r3, [sl]
 80046b8:	e5b5      	b.n	8004226 <_dtoa_r+0x696>
 80046ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800471c <_dtoa_r+0xb8c>
 80046c0:	b11b      	cbz	r3, 80046ca <_dtoa_r+0xb3a>
 80046c2:	f10a 0308 	add.w	r3, sl, #8
 80046c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4650      	mov	r0, sl
 80046cc:	b017      	add	sp, #92	@ 0x5c
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f77f ae3d 	ble.w	8004354 <_dtoa_r+0x7c4>
 80046da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80046de:	2001      	movs	r0, #1
 80046e0:	e65b      	b.n	800439a <_dtoa_r+0x80a>
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f77f aed6 	ble.w	8004496 <_dtoa_r+0x906>
 80046ea:	4656      	mov	r6, sl
 80046ec:	4621      	mov	r1, r4
 80046ee:	4648      	mov	r0, r9
 80046f0:	f7ff f9c5 	bl	8003a7e <quorem>
 80046f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80046f8:	9b08      	ldr	r3, [sp, #32]
 80046fa:	f806 8b01 	strb.w	r8, [r6], #1
 80046fe:	eba6 020a 	sub.w	r2, r6, sl
 8004702:	4293      	cmp	r3, r2
 8004704:	ddb3      	ble.n	800466e <_dtoa_r+0xade>
 8004706:	4649      	mov	r1, r9
 8004708:	2300      	movs	r3, #0
 800470a:	220a      	movs	r2, #10
 800470c:	4658      	mov	r0, fp
 800470e:	f000 f967 	bl	80049e0 <__multadd>
 8004712:	4681      	mov	r9, r0
 8004714:	e7ea      	b.n	80046ec <_dtoa_r+0xb5c>
 8004716:	bf00      	nop
 8004718:	080057ae 	.word	0x080057ae
 800471c:	08005732 	.word	0x08005732

08004720 <_free_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
 8004724:	2900      	cmp	r1, #0
 8004726:	d040      	beq.n	80047aa <_free_r+0x8a>
 8004728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472c:	1f0c      	subs	r4, r1, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfb8      	it	lt
 8004732:	18e4      	addlt	r4, r4, r3
 8004734:	f000 f8e6 	bl	8004904 <__malloc_lock>
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <_free_r+0x8c>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	b933      	cbnz	r3, 800474c <_free_r+0x2c>
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	6014      	str	r4, [r2, #0]
 8004742:	4628      	mov	r0, r5
 8004744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004748:	f000 b8e2 	b.w	8004910 <__malloc_unlock>
 800474c:	42a3      	cmp	r3, r4
 800474e:	d908      	bls.n	8004762 <_free_r+0x42>
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	1821      	adds	r1, r4, r0
 8004754:	428b      	cmp	r3, r1
 8004756:	bf01      	itttt	eq
 8004758:	6819      	ldreq	r1, [r3, #0]
 800475a:	685b      	ldreq	r3, [r3, #4]
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	e7ed      	b.n	800473e <_free_r+0x1e>
 8004762:	461a      	mov	r2, r3
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b10b      	cbz	r3, 800476c <_free_r+0x4c>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d9fa      	bls.n	8004762 <_free_r+0x42>
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	1850      	adds	r0, r2, r1
 8004770:	42a0      	cmp	r0, r4
 8004772:	d10b      	bne.n	800478c <_free_r+0x6c>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4401      	add	r1, r0
 8004778:	1850      	adds	r0, r2, r1
 800477a:	4283      	cmp	r3, r0
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	d1e0      	bne.n	8004742 <_free_r+0x22>
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4408      	add	r0, r1
 8004786:	6010      	str	r0, [r2, #0]
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	e7da      	b.n	8004742 <_free_r+0x22>
 800478c:	d902      	bls.n	8004794 <_free_r+0x74>
 800478e:	230c      	movs	r3, #12
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	e7d6      	b.n	8004742 <_free_r+0x22>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	1821      	adds	r1, r4, r0
 8004798:	428b      	cmp	r3, r1
 800479a:	bf01      	itttt	eq
 800479c:	6819      	ldreq	r1, [r3, #0]
 800479e:	685b      	ldreq	r3, [r3, #4]
 80047a0:	1809      	addeq	r1, r1, r0
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6054      	str	r4, [r2, #4]
 80047a8:	e7cb      	b.n	8004742 <_free_r+0x22>
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20000444 	.word	0x20000444

080047b0 <malloc>:
 80047b0:	4b02      	ldr	r3, [pc, #8]	@ (80047bc <malloc+0xc>)
 80047b2:	4601      	mov	r1, r0
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	f000 b825 	b.w	8004804 <_malloc_r>
 80047ba:	bf00      	nop
 80047bc:	2000007c 	.word	0x2000007c

080047c0 <sbrk_aligned>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4e0f      	ldr	r6, [pc, #60]	@ (8004800 <sbrk_aligned+0x40>)
 80047c4:	460c      	mov	r4, r1
 80047c6:	6831      	ldr	r1, [r6, #0]
 80047c8:	4605      	mov	r5, r0
 80047ca:	b911      	cbnz	r1, 80047d2 <sbrk_aligned+0x12>
 80047cc:	f000 fe92 	bl	80054f4 <_sbrk_r>
 80047d0:	6030      	str	r0, [r6, #0]
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 fe8d 	bl	80054f4 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d103      	bne.n	80047e6 <sbrk_aligned+0x26>
 80047de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80047e2:	4620      	mov	r0, r4
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	1cc4      	adds	r4, r0, #3
 80047e8:	f024 0403 	bic.w	r4, r4, #3
 80047ec:	42a0      	cmp	r0, r4
 80047ee:	d0f8      	beq.n	80047e2 <sbrk_aligned+0x22>
 80047f0:	1a21      	subs	r1, r4, r0
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fe7e 	bl	80054f4 <_sbrk_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d1f2      	bne.n	80047e2 <sbrk_aligned+0x22>
 80047fc:	e7ef      	b.n	80047de <sbrk_aligned+0x1e>
 80047fe:	bf00      	nop
 8004800:	20000440 	.word	0x20000440

08004804 <_malloc_r>:
 8004804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004808:	1ccd      	adds	r5, r1, #3
 800480a:	f025 0503 	bic.w	r5, r5, #3
 800480e:	3508      	adds	r5, #8
 8004810:	2d0c      	cmp	r5, #12
 8004812:	bf38      	it	cc
 8004814:	250c      	movcc	r5, #12
 8004816:	2d00      	cmp	r5, #0
 8004818:	4606      	mov	r6, r0
 800481a:	db01      	blt.n	8004820 <_malloc_r+0x1c>
 800481c:	42a9      	cmp	r1, r5
 800481e:	d904      	bls.n	800482a <_malloc_r+0x26>
 8004820:	230c      	movs	r3, #12
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	2000      	movs	r0, #0
 8004826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004900 <_malloc_r+0xfc>
 800482e:	f000 f869 	bl	8004904 <__malloc_lock>
 8004832:	f8d8 3000 	ldr.w	r3, [r8]
 8004836:	461c      	mov	r4, r3
 8004838:	bb44      	cbnz	r4, 800488c <_malloc_r+0x88>
 800483a:	4629      	mov	r1, r5
 800483c:	4630      	mov	r0, r6
 800483e:	f7ff ffbf 	bl	80047c0 <sbrk_aligned>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	4604      	mov	r4, r0
 8004846:	d158      	bne.n	80048fa <_malloc_r+0xf6>
 8004848:	f8d8 4000 	ldr.w	r4, [r8]
 800484c:	4627      	mov	r7, r4
 800484e:	2f00      	cmp	r7, #0
 8004850:	d143      	bne.n	80048da <_malloc_r+0xd6>
 8004852:	2c00      	cmp	r4, #0
 8004854:	d04b      	beq.n	80048ee <_malloc_r+0xea>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	eb04 0903 	add.w	r9, r4, r3
 8004860:	f000 fe48 	bl	80054f4 <_sbrk_r>
 8004864:	4581      	cmp	r9, r0
 8004866:	d142      	bne.n	80048ee <_malloc_r+0xea>
 8004868:	6821      	ldr	r1, [r4, #0]
 800486a:	4630      	mov	r0, r6
 800486c:	1a6d      	subs	r5, r5, r1
 800486e:	4629      	mov	r1, r5
 8004870:	f7ff ffa6 	bl	80047c0 <sbrk_aligned>
 8004874:	3001      	adds	r0, #1
 8004876:	d03a      	beq.n	80048ee <_malloc_r+0xea>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	442b      	add	r3, r5
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	f8d8 3000 	ldr.w	r3, [r8]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	bb62      	cbnz	r2, 80048e0 <_malloc_r+0xdc>
 8004886:	f8c8 7000 	str.w	r7, [r8]
 800488a:	e00f      	b.n	80048ac <_malloc_r+0xa8>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	1b52      	subs	r2, r2, r5
 8004890:	d420      	bmi.n	80048d4 <_malloc_r+0xd0>
 8004892:	2a0b      	cmp	r2, #11
 8004894:	d917      	bls.n	80048c6 <_malloc_r+0xc2>
 8004896:	1961      	adds	r1, r4, r5
 8004898:	42a3      	cmp	r3, r4
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	6059      	strne	r1, [r3, #4]
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	bf08      	it	eq
 80048a4:	f8c8 1000 	streq.w	r1, [r8]
 80048a8:	5162      	str	r2, [r4, r5]
 80048aa:	604b      	str	r3, [r1, #4]
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f82f 	bl	8004910 <__malloc_unlock>
 80048b2:	f104 000b 	add.w	r0, r4, #11
 80048b6:	1d23      	adds	r3, r4, #4
 80048b8:	f020 0007 	bic.w	r0, r0, #7
 80048bc:	1ac2      	subs	r2, r0, r3
 80048be:	bf1c      	itt	ne
 80048c0:	1a1b      	subne	r3, r3, r0
 80048c2:	50a3      	strne	r3, [r4, r2]
 80048c4:	e7af      	b.n	8004826 <_malloc_r+0x22>
 80048c6:	6862      	ldr	r2, [r4, #4]
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	bf0c      	ite	eq
 80048cc:	f8c8 2000 	streq.w	r2, [r8]
 80048d0:	605a      	strne	r2, [r3, #4]
 80048d2:	e7eb      	b.n	80048ac <_malloc_r+0xa8>
 80048d4:	4623      	mov	r3, r4
 80048d6:	6864      	ldr	r4, [r4, #4]
 80048d8:	e7ae      	b.n	8004838 <_malloc_r+0x34>
 80048da:	463c      	mov	r4, r7
 80048dc:	687f      	ldr	r7, [r7, #4]
 80048de:	e7b6      	b.n	800484e <_malloc_r+0x4a>
 80048e0:	461a      	mov	r2, r3
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d1fb      	bne.n	80048e0 <_malloc_r+0xdc>
 80048e8:	2300      	movs	r3, #0
 80048ea:	6053      	str	r3, [r2, #4]
 80048ec:	e7de      	b.n	80048ac <_malloc_r+0xa8>
 80048ee:	230c      	movs	r3, #12
 80048f0:	4630      	mov	r0, r6
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f000 f80c 	bl	8004910 <__malloc_unlock>
 80048f8:	e794      	b.n	8004824 <_malloc_r+0x20>
 80048fa:	6005      	str	r5, [r0, #0]
 80048fc:	e7d6      	b.n	80048ac <_malloc_r+0xa8>
 80048fe:	bf00      	nop
 8004900:	20000444 	.word	0x20000444

08004904 <__malloc_lock>:
 8004904:	4801      	ldr	r0, [pc, #4]	@ (800490c <__malloc_lock+0x8>)
 8004906:	f7ff b89c 	b.w	8003a42 <__retarget_lock_acquire_recursive>
 800490a:	bf00      	nop
 800490c:	2000043c 	.word	0x2000043c

08004910 <__malloc_unlock>:
 8004910:	4801      	ldr	r0, [pc, #4]	@ (8004918 <__malloc_unlock+0x8>)
 8004912:	f7ff b897 	b.w	8003a44 <__retarget_lock_release_recursive>
 8004916:	bf00      	nop
 8004918:	2000043c 	.word	0x2000043c

0800491c <_Balloc>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	69c6      	ldr	r6, [r0, #28]
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	b976      	cbnz	r6, 8004944 <_Balloc+0x28>
 8004926:	2010      	movs	r0, #16
 8004928:	f7ff ff42 	bl	80047b0 <malloc>
 800492c:	4602      	mov	r2, r0
 800492e:	61e0      	str	r0, [r4, #28]
 8004930:	b920      	cbnz	r0, 800493c <_Balloc+0x20>
 8004932:	216b      	movs	r1, #107	@ 0x6b
 8004934:	4b17      	ldr	r3, [pc, #92]	@ (8004994 <_Balloc+0x78>)
 8004936:	4818      	ldr	r0, [pc, #96]	@ (8004998 <_Balloc+0x7c>)
 8004938:	f000 fdec 	bl	8005514 <__assert_func>
 800493c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004940:	6006      	str	r6, [r0, #0]
 8004942:	60c6      	str	r6, [r0, #12]
 8004944:	69e6      	ldr	r6, [r4, #28]
 8004946:	68f3      	ldr	r3, [r6, #12]
 8004948:	b183      	cbz	r3, 800496c <_Balloc+0x50>
 800494a:	69e3      	ldr	r3, [r4, #28]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004952:	b9b8      	cbnz	r0, 8004984 <_Balloc+0x68>
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f605 	lsl.w	r6, r1, r5
 800495a:	1d72      	adds	r2, r6, #5
 800495c:	4620      	mov	r0, r4
 800495e:	0092      	lsls	r2, r2, #2
 8004960:	f000 fdf6 	bl	8005550 <_calloc_r>
 8004964:	b160      	cbz	r0, 8004980 <_Balloc+0x64>
 8004966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800496a:	e00e      	b.n	800498a <_Balloc+0x6e>
 800496c:	2221      	movs	r2, #33	@ 0x21
 800496e:	2104      	movs	r1, #4
 8004970:	4620      	mov	r0, r4
 8004972:	f000 fded 	bl	8005550 <_calloc_r>
 8004976:	69e3      	ldr	r3, [r4, #28]
 8004978:	60f0      	str	r0, [r6, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e4      	bne.n	800494a <_Balloc+0x2e>
 8004980:	2000      	movs	r0, #0
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	6802      	ldr	r2, [r0, #0]
 8004986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800498a:	2300      	movs	r3, #0
 800498c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004990:	e7f7      	b.n	8004982 <_Balloc+0x66>
 8004992:	bf00      	nop
 8004994:	0800573f 	.word	0x0800573f
 8004998:	080057bf 	.word	0x080057bf

0800499c <_Bfree>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	69c6      	ldr	r6, [r0, #28]
 80049a0:	4605      	mov	r5, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b976      	cbnz	r6, 80049c4 <_Bfree+0x28>
 80049a6:	2010      	movs	r0, #16
 80049a8:	f7ff ff02 	bl	80047b0 <malloc>
 80049ac:	4602      	mov	r2, r0
 80049ae:	61e8      	str	r0, [r5, #28]
 80049b0:	b920      	cbnz	r0, 80049bc <_Bfree+0x20>
 80049b2:	218f      	movs	r1, #143	@ 0x8f
 80049b4:	4b08      	ldr	r3, [pc, #32]	@ (80049d8 <_Bfree+0x3c>)
 80049b6:	4809      	ldr	r0, [pc, #36]	@ (80049dc <_Bfree+0x40>)
 80049b8:	f000 fdac 	bl	8005514 <__assert_func>
 80049bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049c0:	6006      	str	r6, [r0, #0]
 80049c2:	60c6      	str	r6, [r0, #12]
 80049c4:	b13c      	cbz	r4, 80049d6 <_Bfree+0x3a>
 80049c6:	69eb      	ldr	r3, [r5, #28]
 80049c8:	6862      	ldr	r2, [r4, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049d0:	6021      	str	r1, [r4, #0]
 80049d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	0800573f 	.word	0x0800573f
 80049dc:	080057bf 	.word	0x080057bf

080049e0 <__multadd>:
 80049e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e4:	4607      	mov	r7, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	461e      	mov	r6, r3
 80049ea:	2000      	movs	r0, #0
 80049ec:	690d      	ldr	r5, [r1, #16]
 80049ee:	f101 0c14 	add.w	ip, r1, #20
 80049f2:	f8dc 3000 	ldr.w	r3, [ip]
 80049f6:	3001      	adds	r0, #1
 80049f8:	b299      	uxth	r1, r3
 80049fa:	fb02 6101 	mla	r1, r2, r1, r6
 80049fe:	0c1e      	lsrs	r6, r3, #16
 8004a00:	0c0b      	lsrs	r3, r1, #16
 8004a02:	fb02 3306 	mla	r3, r2, r6, r3
 8004a06:	b289      	uxth	r1, r1
 8004a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a0c:	4285      	cmp	r5, r0
 8004a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a12:	f84c 1b04 	str.w	r1, [ip], #4
 8004a16:	dcec      	bgt.n	80049f2 <__multadd+0x12>
 8004a18:	b30e      	cbz	r6, 8004a5e <__multadd+0x7e>
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dc19      	bgt.n	8004a54 <__multadd+0x74>
 8004a20:	6861      	ldr	r1, [r4, #4]
 8004a22:	4638      	mov	r0, r7
 8004a24:	3101      	adds	r1, #1
 8004a26:	f7ff ff79 	bl	800491c <_Balloc>
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	b928      	cbnz	r0, 8004a3a <__multadd+0x5a>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	21ba      	movs	r1, #186	@ 0xba
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <__multadd+0x84>)
 8004a34:	480c      	ldr	r0, [pc, #48]	@ (8004a68 <__multadd+0x88>)
 8004a36:	f000 fd6d 	bl	8005514 <__assert_func>
 8004a3a:	6922      	ldr	r2, [r4, #16]
 8004a3c:	f104 010c 	add.w	r1, r4, #12
 8004a40:	3202      	adds	r2, #2
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	300c      	adds	r0, #12
 8004a46:	f7ff f80c 	bl	8003a62 <memcpy>
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f7ff ffa5 	bl	800499c <_Bfree>
 8004a52:	4644      	mov	r4, r8
 8004a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a58:	3501      	adds	r5, #1
 8004a5a:	615e      	str	r6, [r3, #20]
 8004a5c:	6125      	str	r5, [r4, #16]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a64:	080057ae 	.word	0x080057ae
 8004a68:	080057bf 	.word	0x080057bf

08004a6c <__hi0bits>:
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004a72:	bf3a      	itte	cc
 8004a74:	0403      	lslcc	r3, r0, #16
 8004a76:	2010      	movcc	r0, #16
 8004a78:	2000      	movcs	r0, #0
 8004a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a7e:	bf3c      	itt	cc
 8004a80:	021b      	lslcc	r3, r3, #8
 8004a82:	3008      	addcc	r0, #8
 8004a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a88:	bf3c      	itt	cc
 8004a8a:	011b      	lslcc	r3, r3, #4
 8004a8c:	3004      	addcc	r0, #4
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a92:	bf3c      	itt	cc
 8004a94:	009b      	lslcc	r3, r3, #2
 8004a96:	3002      	addcc	r0, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db05      	blt.n	8004aa8 <__hi0bits+0x3c>
 8004a9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004aa0:	f100 0001 	add.w	r0, r0, #1
 8004aa4:	bf08      	it	eq
 8004aa6:	2020      	moveq	r0, #32
 8004aa8:	4770      	bx	lr

08004aaa <__lo0bits>:
 8004aaa:	6803      	ldr	r3, [r0, #0]
 8004aac:	4602      	mov	r2, r0
 8004aae:	f013 0007 	ands.w	r0, r3, #7
 8004ab2:	d00b      	beq.n	8004acc <__lo0bits+0x22>
 8004ab4:	07d9      	lsls	r1, r3, #31
 8004ab6:	d421      	bmi.n	8004afc <__lo0bits+0x52>
 8004ab8:	0798      	lsls	r0, r3, #30
 8004aba:	bf49      	itett	mi
 8004abc:	085b      	lsrmi	r3, r3, #1
 8004abe:	089b      	lsrpl	r3, r3, #2
 8004ac0:	2001      	movmi	r0, #1
 8004ac2:	6013      	strmi	r3, [r2, #0]
 8004ac4:	bf5c      	itt	pl
 8004ac6:	2002      	movpl	r0, #2
 8004ac8:	6013      	strpl	r3, [r2, #0]
 8004aca:	4770      	bx	lr
 8004acc:	b299      	uxth	r1, r3
 8004ace:	b909      	cbnz	r1, 8004ad4 <__lo0bits+0x2a>
 8004ad0:	2010      	movs	r0, #16
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2d9      	uxtb	r1, r3
 8004ad6:	b909      	cbnz	r1, 8004adc <__lo0bits+0x32>
 8004ad8:	3008      	adds	r0, #8
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	0719      	lsls	r1, r3, #28
 8004ade:	bf04      	itt	eq
 8004ae0:	091b      	lsreq	r3, r3, #4
 8004ae2:	3004      	addeq	r0, #4
 8004ae4:	0799      	lsls	r1, r3, #30
 8004ae6:	bf04      	itt	eq
 8004ae8:	089b      	lsreq	r3, r3, #2
 8004aea:	3002      	addeq	r0, #2
 8004aec:	07d9      	lsls	r1, r3, #31
 8004aee:	d403      	bmi.n	8004af8 <__lo0bits+0x4e>
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	f100 0001 	add.w	r0, r0, #1
 8004af6:	d003      	beq.n	8004b00 <__lo0bits+0x56>
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4770      	bx	lr
 8004afc:	2000      	movs	r0, #0
 8004afe:	4770      	bx	lr
 8004b00:	2020      	movs	r0, #32
 8004b02:	4770      	bx	lr

08004b04 <__i2b>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	460c      	mov	r4, r1
 8004b08:	2101      	movs	r1, #1
 8004b0a:	f7ff ff07 	bl	800491c <_Balloc>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	b928      	cbnz	r0, 8004b1e <__i2b+0x1a>
 8004b12:	f240 1145 	movw	r1, #325	@ 0x145
 8004b16:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <__i2b+0x24>)
 8004b18:	4804      	ldr	r0, [pc, #16]	@ (8004b2c <__i2b+0x28>)
 8004b1a:	f000 fcfb 	bl	8005514 <__assert_func>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	6144      	str	r4, [r0, #20]
 8004b22:	6103      	str	r3, [r0, #16]
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	080057ae 	.word	0x080057ae
 8004b2c:	080057bf 	.word	0x080057bf

08004b30 <__multiply>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	4614      	mov	r4, r2
 8004b36:	690a      	ldr	r2, [r1, #16]
 8004b38:	6923      	ldr	r3, [r4, #16]
 8004b3a:	460f      	mov	r7, r1
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	bfa2      	ittt	ge
 8004b40:	4623      	movge	r3, r4
 8004b42:	460c      	movge	r4, r1
 8004b44:	461f      	movge	r7, r3
 8004b46:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004b4a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	eb0a 0609 	add.w	r6, sl, r9
 8004b56:	42b3      	cmp	r3, r6
 8004b58:	b085      	sub	sp, #20
 8004b5a:	bfb8      	it	lt
 8004b5c:	3101      	addlt	r1, #1
 8004b5e:	f7ff fedd 	bl	800491c <_Balloc>
 8004b62:	b930      	cbnz	r0, 8004b72 <__multiply+0x42>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b6a:	4b43      	ldr	r3, [pc, #268]	@ (8004c78 <__multiply+0x148>)
 8004b6c:	4843      	ldr	r0, [pc, #268]	@ (8004c7c <__multiply+0x14c>)
 8004b6e:	f000 fcd1 	bl	8005514 <__assert_func>
 8004b72:	f100 0514 	add.w	r5, r0, #20
 8004b76:	462b      	mov	r3, r5
 8004b78:	2200      	movs	r2, #0
 8004b7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b7e:	4543      	cmp	r3, r8
 8004b80:	d321      	bcc.n	8004bc6 <__multiply+0x96>
 8004b82:	f107 0114 	add.w	r1, r7, #20
 8004b86:	f104 0214 	add.w	r2, r4, #20
 8004b8a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004b8e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	1b13      	subs	r3, r2, r4
 8004b96:	3b15      	subs	r3, #21
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	f104 0715 	add.w	r7, r4, #21
 8004ba2:	42ba      	cmp	r2, r7
 8004ba4:	bf38      	it	cc
 8004ba6:	2304      	movcc	r3, #4
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	9b02      	ldr	r3, [sp, #8]
 8004bac:	9103      	str	r1, [sp, #12]
 8004bae:	428b      	cmp	r3, r1
 8004bb0:	d80c      	bhi.n	8004bcc <__multiply+0x9c>
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	dd03      	ble.n	8004bbe <__multiply+0x8e>
 8004bb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d05a      	beq.n	8004c74 <__multiply+0x144>
 8004bbe:	6106      	str	r6, [r0, #16]
 8004bc0:	b005      	add	sp, #20
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	f843 2b04 	str.w	r2, [r3], #4
 8004bca:	e7d8      	b.n	8004b7e <__multiply+0x4e>
 8004bcc:	f8b1 a000 	ldrh.w	sl, [r1]
 8004bd0:	f1ba 0f00 	cmp.w	sl, #0
 8004bd4:	d023      	beq.n	8004c1e <__multiply+0xee>
 8004bd6:	46a9      	mov	r9, r5
 8004bd8:	f04f 0c00 	mov.w	ip, #0
 8004bdc:	f104 0e14 	add.w	lr, r4, #20
 8004be0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004be4:	f8d9 3000 	ldr.w	r3, [r9]
 8004be8:	fa1f fb87 	uxth.w	fp, r7
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	fb0a 330b 	mla	r3, sl, fp, r3
 8004bf2:	4463      	add	r3, ip
 8004bf4:	f8d9 c000 	ldr.w	ip, [r9]
 8004bf8:	0c3f      	lsrs	r7, r7, #16
 8004bfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004bfe:	fb0a c707 	mla	r7, sl, r7, ip
 8004c02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c0c:	4572      	cmp	r2, lr
 8004c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c12:	f849 3b04 	str.w	r3, [r9], #4
 8004c16:	d8e3      	bhi.n	8004be0 <__multiply+0xb0>
 8004c18:	9b01      	ldr	r3, [sp, #4]
 8004c1a:	f845 c003 	str.w	ip, [r5, r3]
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	3104      	adds	r1, #4
 8004c22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004c26:	f1b9 0f00 	cmp.w	r9, #0
 8004c2a:	d021      	beq.n	8004c70 <__multiply+0x140>
 8004c2c:	46ae      	mov	lr, r5
 8004c2e:	f04f 0a00 	mov.w	sl, #0
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	f104 0c14 	add.w	ip, r4, #20
 8004c38:	f8bc b000 	ldrh.w	fp, [ip]
 8004c3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	fb09 770b 	mla	r7, r9, fp, r7
 8004c46:	4457      	add	r7, sl
 8004c48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c4c:	f84e 3b04 	str.w	r3, [lr], #4
 8004c50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c58:	f8be 3000 	ldrh.w	r3, [lr]
 8004c5c:	4562      	cmp	r2, ip
 8004c5e:	fb09 330a 	mla	r3, r9, sl, r3
 8004c62:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004c66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c6a:	d8e5      	bhi.n	8004c38 <__multiply+0x108>
 8004c6c:	9f01      	ldr	r7, [sp, #4]
 8004c6e:	51eb      	str	r3, [r5, r7]
 8004c70:	3504      	adds	r5, #4
 8004c72:	e79a      	b.n	8004baa <__multiply+0x7a>
 8004c74:	3e01      	subs	r6, #1
 8004c76:	e79c      	b.n	8004bb2 <__multiply+0x82>
 8004c78:	080057ae 	.word	0x080057ae
 8004c7c:	080057bf 	.word	0x080057bf

08004c80 <__pow5mult>:
 8004c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c84:	4615      	mov	r5, r2
 8004c86:	f012 0203 	ands.w	r2, r2, #3
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	d007      	beq.n	8004ca0 <__pow5mult+0x20>
 8004c90:	4c25      	ldr	r4, [pc, #148]	@ (8004d28 <__pow5mult+0xa8>)
 8004c92:	3a01      	subs	r2, #1
 8004c94:	2300      	movs	r3, #0
 8004c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c9a:	f7ff fea1 	bl	80049e0 <__multadd>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	10ad      	asrs	r5, r5, #2
 8004ca2:	d03d      	beq.n	8004d20 <__pow5mult+0xa0>
 8004ca4:	69fc      	ldr	r4, [r7, #28]
 8004ca6:	b97c      	cbnz	r4, 8004cc8 <__pow5mult+0x48>
 8004ca8:	2010      	movs	r0, #16
 8004caa:	f7ff fd81 	bl	80047b0 <malloc>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	61f8      	str	r0, [r7, #28]
 8004cb2:	b928      	cbnz	r0, 8004cc0 <__pow5mult+0x40>
 8004cb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <__pow5mult+0xac>)
 8004cba:	481d      	ldr	r0, [pc, #116]	@ (8004d30 <__pow5mult+0xb0>)
 8004cbc:	f000 fc2a 	bl	8005514 <__assert_func>
 8004cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cc4:	6004      	str	r4, [r0, #0]
 8004cc6:	60c4      	str	r4, [r0, #12]
 8004cc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004cd0:	b94c      	cbnz	r4, 8004ce6 <__pow5mult+0x66>
 8004cd2:	f240 2171 	movw	r1, #625	@ 0x271
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff ff14 	bl	8004b04 <__i2b>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ce4:	6003      	str	r3, [r0, #0]
 8004ce6:	f04f 0900 	mov.w	r9, #0
 8004cea:	07eb      	lsls	r3, r5, #31
 8004cec:	d50a      	bpl.n	8004d04 <__pow5mult+0x84>
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	f7ff ff1c 	bl	8004b30 <__multiply>
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	f7ff fe4d 	bl	800499c <_Bfree>
 8004d02:	4646      	mov	r6, r8
 8004d04:	106d      	asrs	r5, r5, #1
 8004d06:	d00b      	beq.n	8004d20 <__pow5mult+0xa0>
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	b938      	cbnz	r0, 8004d1c <__pow5mult+0x9c>
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ff0d 	bl	8004b30 <__multiply>
 8004d16:	6020      	str	r0, [r4, #0]
 8004d18:	f8c0 9000 	str.w	r9, [r0]
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	e7e4      	b.n	8004cea <__pow5mult+0x6a>
 8004d20:	4630      	mov	r0, r6
 8004d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d26:	bf00      	nop
 8004d28:	08005818 	.word	0x08005818
 8004d2c:	0800573f 	.word	0x0800573f
 8004d30:	080057bf 	.word	0x080057bf

08004d34 <__lshift>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	460c      	mov	r4, r1
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	4691      	mov	r9, r2
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	6849      	ldr	r1, [r1, #4]
 8004d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d4c:	f108 0601 	add.w	r6, r8, #1
 8004d50:	42b3      	cmp	r3, r6
 8004d52:	db0b      	blt.n	8004d6c <__lshift+0x38>
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7ff fde1 	bl	800491c <_Balloc>
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	b948      	cbnz	r0, 8004d72 <__lshift+0x3e>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004d64:	4b27      	ldr	r3, [pc, #156]	@ (8004e04 <__lshift+0xd0>)
 8004d66:	4828      	ldr	r0, [pc, #160]	@ (8004e08 <__lshift+0xd4>)
 8004d68:	f000 fbd4 	bl	8005514 <__assert_func>
 8004d6c:	3101      	adds	r1, #1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	e7ee      	b.n	8004d50 <__lshift+0x1c>
 8004d72:	2300      	movs	r3, #0
 8004d74:	f100 0114 	add.w	r1, r0, #20
 8004d78:	f100 0210 	add.w	r2, r0, #16
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4553      	cmp	r3, sl
 8004d80:	db33      	blt.n	8004dea <__lshift+0xb6>
 8004d82:	6920      	ldr	r0, [r4, #16]
 8004d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d88:	f104 0314 	add.w	r3, r4, #20
 8004d8c:	f019 091f 	ands.w	r9, r9, #31
 8004d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d98:	d02b      	beq.n	8004df2 <__lshift+0xbe>
 8004d9a:	468a      	mov	sl, r1
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	fa00 f009 	lsl.w	r0, r0, r9
 8004da8:	4310      	orrs	r0, r2
 8004daa:	f84a 0b04 	str.w	r0, [sl], #4
 8004dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db2:	459c      	cmp	ip, r3
 8004db4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004db8:	d8f3      	bhi.n	8004da2 <__lshift+0x6e>
 8004dba:	ebac 0304 	sub.w	r3, ip, r4
 8004dbe:	3b15      	subs	r3, #21
 8004dc0:	f023 0303 	bic.w	r3, r3, #3
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	f104 0015 	add.w	r0, r4, #21
 8004dca:	4584      	cmp	ip, r0
 8004dcc:	bf38      	it	cc
 8004dce:	2304      	movcc	r3, #4
 8004dd0:	50ca      	str	r2, [r1, r3]
 8004dd2:	b10a      	cbz	r2, 8004dd8 <__lshift+0xa4>
 8004dd4:	f108 0602 	add.w	r6, r8, #2
 8004dd8:	3e01      	subs	r6, #1
 8004dda:	4638      	mov	r0, r7
 8004ddc:	4621      	mov	r1, r4
 8004dde:	612e      	str	r6, [r5, #16]
 8004de0:	f7ff fddc 	bl	800499c <_Bfree>
 8004de4:	4628      	mov	r0, r5
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8004dee:	3301      	adds	r3, #1
 8004df0:	e7c5      	b.n	8004d7e <__lshift+0x4a>
 8004df2:	3904      	subs	r1, #4
 8004df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df8:	459c      	cmp	ip, r3
 8004dfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8004dfe:	d8f9      	bhi.n	8004df4 <__lshift+0xc0>
 8004e00:	e7ea      	b.n	8004dd8 <__lshift+0xa4>
 8004e02:	bf00      	nop
 8004e04:	080057ae 	.word	0x080057ae
 8004e08:	080057bf 	.word	0x080057bf

08004e0c <__mcmp>:
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	690a      	ldr	r2, [r1, #16]
 8004e10:	6900      	ldr	r0, [r0, #16]
 8004e12:	b530      	push	{r4, r5, lr}
 8004e14:	1a80      	subs	r0, r0, r2
 8004e16:	d10e      	bne.n	8004e36 <__mcmp+0x2a>
 8004e18:	3314      	adds	r3, #20
 8004e1a:	3114      	adds	r1, #20
 8004e1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e2c:	4295      	cmp	r5, r2
 8004e2e:	d003      	beq.n	8004e38 <__mcmp+0x2c>
 8004e30:	d205      	bcs.n	8004e3e <__mcmp+0x32>
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e36:	bd30      	pop	{r4, r5, pc}
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d3f3      	bcc.n	8004e24 <__mcmp+0x18>
 8004e3c:	e7fb      	b.n	8004e36 <__mcmp+0x2a>
 8004e3e:	2001      	movs	r0, #1
 8004e40:	e7f9      	b.n	8004e36 <__mcmp+0x2a>
	...

08004e44 <__mdiff>:
 8004e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e48:	4689      	mov	r9, r1
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4648      	mov	r0, r9
 8004e50:	4614      	mov	r4, r2
 8004e52:	f7ff ffdb 	bl	8004e0c <__mcmp>
 8004e56:	1e05      	subs	r5, r0, #0
 8004e58:	d112      	bne.n	8004e80 <__mdiff+0x3c>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f7ff fd5d 	bl	800491c <_Balloc>
 8004e62:	4602      	mov	r2, r0
 8004e64:	b928      	cbnz	r0, 8004e72 <__mdiff+0x2e>
 8004e66:	f240 2137 	movw	r1, #567	@ 0x237
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <__mdiff+0x120>)
 8004e6c:	483e      	ldr	r0, [pc, #248]	@ (8004f68 <__mdiff+0x124>)
 8004e6e:	f000 fb51 	bl	8005514 <__assert_func>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e78:	4610      	mov	r0, r2
 8004e7a:	b003      	add	sp, #12
 8004e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e80:	bfbc      	itt	lt
 8004e82:	464b      	movlt	r3, r9
 8004e84:	46a1      	movlt	r9, r4
 8004e86:	4630      	mov	r0, r6
 8004e88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e8c:	bfba      	itte	lt
 8004e8e:	461c      	movlt	r4, r3
 8004e90:	2501      	movlt	r5, #1
 8004e92:	2500      	movge	r5, #0
 8004e94:	f7ff fd42 	bl	800491c <_Balloc>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	b918      	cbnz	r0, 8004ea4 <__mdiff+0x60>
 8004e9c:	f240 2145 	movw	r1, #581	@ 0x245
 8004ea0:	4b30      	ldr	r3, [pc, #192]	@ (8004f64 <__mdiff+0x120>)
 8004ea2:	e7e3      	b.n	8004e6c <__mdiff+0x28>
 8004ea4:	f100 0b14 	add.w	fp, r0, #20
 8004ea8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004eac:	f109 0310 	add.w	r3, r9, #16
 8004eb0:	60c5      	str	r5, [r0, #12]
 8004eb2:	f04f 0c00 	mov.w	ip, #0
 8004eb6:	f109 0514 	add.w	r5, r9, #20
 8004eba:	46d9      	mov	r9, fp
 8004ebc:	6926      	ldr	r6, [r4, #16]
 8004ebe:	f104 0e14 	add.w	lr, r4, #20
 8004ec2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004ec6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	9b01      	ldr	r3, [sp, #4]
 8004ece:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004ed2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004ed6:	b281      	uxth	r1, r0
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	fa1f f38a 	uxth.w	r3, sl
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	0c00      	lsrs	r0, r0, #16
 8004ee2:	4463      	add	r3, ip
 8004ee4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004ee8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ef2:	4576      	cmp	r6, lr
 8004ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ef8:	f849 3b04 	str.w	r3, [r9], #4
 8004efc:	d8e6      	bhi.n	8004ecc <__mdiff+0x88>
 8004efe:	1b33      	subs	r3, r6, r4
 8004f00:	3b15      	subs	r3, #21
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	3415      	adds	r4, #21
 8004f08:	3304      	adds	r3, #4
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	bf38      	it	cc
 8004f0e:	2304      	movcc	r3, #4
 8004f10:	441d      	add	r5, r3
 8004f12:	445b      	add	r3, fp
 8004f14:	461e      	mov	r6, r3
 8004f16:	462c      	mov	r4, r5
 8004f18:	4544      	cmp	r4, r8
 8004f1a:	d30e      	bcc.n	8004f3a <__mdiff+0xf6>
 8004f1c:	f108 0103 	add.w	r1, r8, #3
 8004f20:	1b49      	subs	r1, r1, r5
 8004f22:	f021 0103 	bic.w	r1, r1, #3
 8004f26:	3d03      	subs	r5, #3
 8004f28:	45a8      	cmp	r8, r5
 8004f2a:	bf38      	it	cc
 8004f2c:	2100      	movcc	r1, #0
 8004f2e:	440b      	add	r3, r1
 8004f30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f34:	b199      	cbz	r1, 8004f5e <__mdiff+0x11a>
 8004f36:	6117      	str	r7, [r2, #16]
 8004f38:	e79e      	b.n	8004e78 <__mdiff+0x34>
 8004f3a:	46e6      	mov	lr, ip
 8004f3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004f40:	fa1f fc81 	uxth.w	ip, r1
 8004f44:	44f4      	add	ip, lr
 8004f46:	0c08      	lsrs	r0, r1, #16
 8004f48:	4471      	add	r1, lr
 8004f4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f4e:	b289      	uxth	r1, r1
 8004f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f58:	f846 1b04 	str.w	r1, [r6], #4
 8004f5c:	e7dc      	b.n	8004f18 <__mdiff+0xd4>
 8004f5e:	3f01      	subs	r7, #1
 8004f60:	e7e6      	b.n	8004f30 <__mdiff+0xec>
 8004f62:	bf00      	nop
 8004f64:	080057ae 	.word	0x080057ae
 8004f68:	080057bf 	.word	0x080057bf

08004f6c <__d2b>:
 8004f6c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004f70:	2101      	movs	r1, #1
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	9e08      	ldr	r6, [sp, #32]
 8004f78:	f7ff fcd0 	bl	800491c <_Balloc>
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	b930      	cbnz	r0, 8004f8e <__d2b+0x22>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f240 310f 	movw	r1, #783	@ 0x30f
 8004f86:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <__d2b+0xa8>)
 8004f88:	4823      	ldr	r0, [pc, #140]	@ (8005018 <__d2b+0xac>)
 8004f8a:	f000 fac3 	bl	8005514 <__assert_func>
 8004f8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f96:	b10d      	cbz	r5, 8004f9c <__d2b+0x30>
 8004f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f1b8 0300 	subs.w	r3, r8, #0
 8004fa2:	d024      	beq.n	8004fee <__d2b+0x82>
 8004fa4:	4668      	mov	r0, sp
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	f7ff fd7f 	bl	8004aaa <__lo0bits>
 8004fac:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004fb0:	b1d8      	cbz	r0, 8004fea <__d2b+0x7e>
 8004fb2:	f1c0 0320 	rsb	r3, r0, #32
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	40c2      	lsrs	r2, r0
 8004fbe:	6163      	str	r3, [r4, #20]
 8004fc0:	9201      	str	r2, [sp, #4]
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2201      	moveq	r2, #1
 8004fca:	2202      	movne	r2, #2
 8004fcc:	61a3      	str	r3, [r4, #24]
 8004fce:	6122      	str	r2, [r4, #16]
 8004fd0:	b1ad      	cbz	r5, 8004ffe <__d2b+0x92>
 8004fd2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004fd6:	4405      	add	r5, r0
 8004fd8:	6035      	str	r5, [r6, #0]
 8004fda:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe0:	6018      	str	r0, [r3, #0]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	b002      	add	sp, #8
 8004fe6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004fea:	6161      	str	r1, [r4, #20]
 8004fec:	e7e9      	b.n	8004fc2 <__d2b+0x56>
 8004fee:	a801      	add	r0, sp, #4
 8004ff0:	f7ff fd5b 	bl	8004aaa <__lo0bits>
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	6163      	str	r3, [r4, #20]
 8004ffa:	3020      	adds	r0, #32
 8004ffc:	e7e7      	b.n	8004fce <__d2b+0x62>
 8004ffe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005002:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005006:	6030      	str	r0, [r6, #0]
 8005008:	6918      	ldr	r0, [r3, #16]
 800500a:	f7ff fd2f 	bl	8004a6c <__hi0bits>
 800500e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005012:	e7e4      	b.n	8004fde <__d2b+0x72>
 8005014:	080057ae 	.word	0x080057ae
 8005018:	080057bf 	.word	0x080057bf

0800501c <__sfputc_r>:
 800501c:	6893      	ldr	r3, [r2, #8]
 800501e:	b410      	push	{r4}
 8005020:	3b01      	subs	r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	da07      	bge.n	8005038 <__sfputc_r+0x1c>
 8005028:	6994      	ldr	r4, [r2, #24]
 800502a:	42a3      	cmp	r3, r4
 800502c:	db01      	blt.n	8005032 <__sfputc_r+0x16>
 800502e:	290a      	cmp	r1, #10
 8005030:	d102      	bne.n	8005038 <__sfputc_r+0x1c>
 8005032:	bc10      	pop	{r4}
 8005034:	f7fe bbf3 	b.w	800381e <__swbuf_r>
 8005038:	6813      	ldr	r3, [r2, #0]
 800503a:	1c58      	adds	r0, r3, #1
 800503c:	6010      	str	r0, [r2, #0]
 800503e:	7019      	strb	r1, [r3, #0]
 8005040:	4608      	mov	r0, r1
 8005042:	bc10      	pop	{r4}
 8005044:	4770      	bx	lr

08005046 <__sfputs_r>:
 8005046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005048:	4606      	mov	r6, r0
 800504a:	460f      	mov	r7, r1
 800504c:	4614      	mov	r4, r2
 800504e:	18d5      	adds	r5, r2, r3
 8005050:	42ac      	cmp	r4, r5
 8005052:	d101      	bne.n	8005058 <__sfputs_r+0x12>
 8005054:	2000      	movs	r0, #0
 8005056:	e007      	b.n	8005068 <__sfputs_r+0x22>
 8005058:	463a      	mov	r2, r7
 800505a:	4630      	mov	r0, r6
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	f7ff ffdc 	bl	800501c <__sfputc_r>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d1f3      	bne.n	8005050 <__sfputs_r+0xa>
 8005068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800506c <_vfiprintf_r>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	460d      	mov	r5, r1
 8005072:	4614      	mov	r4, r2
 8005074:	4698      	mov	r8, r3
 8005076:	4606      	mov	r6, r0
 8005078:	b09d      	sub	sp, #116	@ 0x74
 800507a:	b118      	cbz	r0, 8005084 <_vfiprintf_r+0x18>
 800507c:	6a03      	ldr	r3, [r0, #32]
 800507e:	b90b      	cbnz	r3, 8005084 <_vfiprintf_r+0x18>
 8005080:	f7fe fae4 	bl	800364c <__sinit>
 8005084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005086:	07d9      	lsls	r1, r3, #31
 8005088:	d405      	bmi.n	8005096 <_vfiprintf_r+0x2a>
 800508a:	89ab      	ldrh	r3, [r5, #12]
 800508c:	059a      	lsls	r2, r3, #22
 800508e:	d402      	bmi.n	8005096 <_vfiprintf_r+0x2a>
 8005090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005092:	f7fe fcd6 	bl	8003a42 <__retarget_lock_acquire_recursive>
 8005096:	89ab      	ldrh	r3, [r5, #12]
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	d501      	bpl.n	80050a0 <_vfiprintf_r+0x34>
 800509c:	692b      	ldr	r3, [r5, #16]
 800509e:	b99b      	cbnz	r3, 80050c8 <_vfiprintf_r+0x5c>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fe fbfa 	bl	800389c <__swsetup_r>
 80050a8:	b170      	cbz	r0, 80050c8 <_vfiprintf_r+0x5c>
 80050aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050ac:	07dc      	lsls	r4, r3, #31
 80050ae:	d504      	bpl.n	80050ba <_vfiprintf_r+0x4e>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050b4:	b01d      	add	sp, #116	@ 0x74
 80050b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ba:	89ab      	ldrh	r3, [r5, #12]
 80050bc:	0598      	lsls	r0, r3, #22
 80050be:	d4f7      	bmi.n	80050b0 <_vfiprintf_r+0x44>
 80050c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050c2:	f7fe fcbf 	bl	8003a44 <__retarget_lock_release_recursive>
 80050c6:	e7f3      	b.n	80050b0 <_vfiprintf_r+0x44>
 80050c8:	2300      	movs	r3, #0
 80050ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80050cc:	2320      	movs	r3, #32
 80050ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050d2:	2330      	movs	r3, #48	@ 0x30
 80050d4:	f04f 0901 	mov.w	r9, #1
 80050d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005288 <_vfiprintf_r+0x21c>
 80050e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050e4:	4623      	mov	r3, r4
 80050e6:	469a      	mov	sl, r3
 80050e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ec:	b10a      	cbz	r2, 80050f2 <_vfiprintf_r+0x86>
 80050ee:	2a25      	cmp	r2, #37	@ 0x25
 80050f0:	d1f9      	bne.n	80050e6 <_vfiprintf_r+0x7a>
 80050f2:	ebba 0b04 	subs.w	fp, sl, r4
 80050f6:	d00b      	beq.n	8005110 <_vfiprintf_r+0xa4>
 80050f8:	465b      	mov	r3, fp
 80050fa:	4622      	mov	r2, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ffa1 	bl	8005046 <__sfputs_r>
 8005104:	3001      	adds	r0, #1
 8005106:	f000 80a7 	beq.w	8005258 <_vfiprintf_r+0x1ec>
 800510a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800510c:	445a      	add	r2, fp
 800510e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005110:	f89a 3000 	ldrb.w	r3, [sl]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 809f 	beq.w	8005258 <_vfiprintf_r+0x1ec>
 800511a:	2300      	movs	r3, #0
 800511c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005124:	f10a 0a01 	add.w	sl, sl, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005130:	931a      	str	r3, [sp, #104]	@ 0x68
 8005132:	4654      	mov	r4, sl
 8005134:	2205      	movs	r2, #5
 8005136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513a:	4853      	ldr	r0, [pc, #332]	@ (8005288 <_vfiprintf_r+0x21c>)
 800513c:	f7fe fc83 	bl	8003a46 <memchr>
 8005140:	9a04      	ldr	r2, [sp, #16]
 8005142:	b9d8      	cbnz	r0, 800517c <_vfiprintf_r+0x110>
 8005144:	06d1      	lsls	r1, r2, #27
 8005146:	bf44      	itt	mi
 8005148:	2320      	movmi	r3, #32
 800514a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800514e:	0713      	lsls	r3, r2, #28
 8005150:	bf44      	itt	mi
 8005152:	232b      	movmi	r3, #43	@ 0x2b
 8005154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005158:	f89a 3000 	ldrb.w	r3, [sl]
 800515c:	2b2a      	cmp	r3, #42	@ 0x2a
 800515e:	d015      	beq.n	800518c <_vfiprintf_r+0x120>
 8005160:	4654      	mov	r4, sl
 8005162:	2000      	movs	r0, #0
 8005164:	f04f 0c0a 	mov.w	ip, #10
 8005168:	9a07      	ldr	r2, [sp, #28]
 800516a:	4621      	mov	r1, r4
 800516c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005170:	3b30      	subs	r3, #48	@ 0x30
 8005172:	2b09      	cmp	r3, #9
 8005174:	d94b      	bls.n	800520e <_vfiprintf_r+0x1a2>
 8005176:	b1b0      	cbz	r0, 80051a6 <_vfiprintf_r+0x13a>
 8005178:	9207      	str	r2, [sp, #28]
 800517a:	e014      	b.n	80051a6 <_vfiprintf_r+0x13a>
 800517c:	eba0 0308 	sub.w	r3, r0, r8
 8005180:	fa09 f303 	lsl.w	r3, r9, r3
 8005184:	4313      	orrs	r3, r2
 8005186:	46a2      	mov	sl, r4
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	e7d2      	b.n	8005132 <_vfiprintf_r+0xc6>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	1d19      	adds	r1, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	9103      	str	r1, [sp, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfbb      	ittet	lt
 8005198:	425b      	neglt	r3, r3
 800519a:	f042 0202 	orrlt.w	r2, r2, #2
 800519e:	9307      	strge	r3, [sp, #28]
 80051a0:	9307      	strlt	r3, [sp, #28]
 80051a2:	bfb8      	it	lt
 80051a4:	9204      	strlt	r2, [sp, #16]
 80051a6:	7823      	ldrb	r3, [r4, #0]
 80051a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80051aa:	d10a      	bne.n	80051c2 <_vfiprintf_r+0x156>
 80051ac:	7863      	ldrb	r3, [r4, #1]
 80051ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b0:	d132      	bne.n	8005218 <_vfiprintf_r+0x1ac>
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	3402      	adds	r4, #2
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	9203      	str	r2, [sp, #12]
 80051bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800528c <_vfiprintf_r+0x220>
 80051c6:	2203      	movs	r2, #3
 80051c8:	4650      	mov	r0, sl
 80051ca:	7821      	ldrb	r1, [r4, #0]
 80051cc:	f7fe fc3b 	bl	8003a46 <memchr>
 80051d0:	b138      	cbz	r0, 80051e2 <_vfiprintf_r+0x176>
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	9b04      	ldr	r3, [sp, #16]
 80051d6:	eba0 000a 	sub.w	r0, r0, sl
 80051da:	4082      	lsls	r2, r0
 80051dc:	4313      	orrs	r3, r2
 80051de:	3401      	adds	r4, #1
 80051e0:	9304      	str	r3, [sp, #16]
 80051e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e6:	2206      	movs	r2, #6
 80051e8:	4829      	ldr	r0, [pc, #164]	@ (8005290 <_vfiprintf_r+0x224>)
 80051ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051ee:	f7fe fc2a 	bl	8003a46 <memchr>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d03f      	beq.n	8005276 <_vfiprintf_r+0x20a>
 80051f6:	4b27      	ldr	r3, [pc, #156]	@ (8005294 <_vfiprintf_r+0x228>)
 80051f8:	bb1b      	cbnz	r3, 8005242 <_vfiprintf_r+0x1d6>
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	3307      	adds	r3, #7
 80051fe:	f023 0307 	bic.w	r3, r3, #7
 8005202:	3308      	adds	r3, #8
 8005204:	9303      	str	r3, [sp, #12]
 8005206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005208:	443b      	add	r3, r7
 800520a:	9309      	str	r3, [sp, #36]	@ 0x24
 800520c:	e76a      	b.n	80050e4 <_vfiprintf_r+0x78>
 800520e:	460c      	mov	r4, r1
 8005210:	2001      	movs	r0, #1
 8005212:	fb0c 3202 	mla	r2, ip, r2, r3
 8005216:	e7a8      	b.n	800516a <_vfiprintf_r+0xfe>
 8005218:	2300      	movs	r3, #0
 800521a:	f04f 0c0a 	mov.w	ip, #10
 800521e:	4619      	mov	r1, r3
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4620      	mov	r0, r4
 8005226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800522a:	3a30      	subs	r2, #48	@ 0x30
 800522c:	2a09      	cmp	r2, #9
 800522e:	d903      	bls.n	8005238 <_vfiprintf_r+0x1cc>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0c6      	beq.n	80051c2 <_vfiprintf_r+0x156>
 8005234:	9105      	str	r1, [sp, #20]
 8005236:	e7c4      	b.n	80051c2 <_vfiprintf_r+0x156>
 8005238:	4604      	mov	r4, r0
 800523a:	2301      	movs	r3, #1
 800523c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005240:	e7f0      	b.n	8005224 <_vfiprintf_r+0x1b8>
 8005242:	ab03      	add	r3, sp, #12
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	462a      	mov	r2, r5
 8005248:	4630      	mov	r0, r6
 800524a:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <_vfiprintf_r+0x22c>)
 800524c:	a904      	add	r1, sp, #16
 800524e:	f7fd fdb3 	bl	8002db8 <_printf_float>
 8005252:	4607      	mov	r7, r0
 8005254:	1c78      	adds	r0, r7, #1
 8005256:	d1d6      	bne.n	8005206 <_vfiprintf_r+0x19a>
 8005258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800525a:	07d9      	lsls	r1, r3, #31
 800525c:	d405      	bmi.n	800526a <_vfiprintf_r+0x1fe>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	059a      	lsls	r2, r3, #22
 8005262:	d402      	bmi.n	800526a <_vfiprintf_r+0x1fe>
 8005264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005266:	f7fe fbed 	bl	8003a44 <__retarget_lock_release_recursive>
 800526a:	89ab      	ldrh	r3, [r5, #12]
 800526c:	065b      	lsls	r3, r3, #25
 800526e:	f53f af1f 	bmi.w	80050b0 <_vfiprintf_r+0x44>
 8005272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005274:	e71e      	b.n	80050b4 <_vfiprintf_r+0x48>
 8005276:	ab03      	add	r3, sp, #12
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	462a      	mov	r2, r5
 800527c:	4630      	mov	r0, r6
 800527e:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <_vfiprintf_r+0x22c>)
 8005280:	a904      	add	r1, sp, #16
 8005282:	f7fe f837 	bl	80032f4 <_printf_i>
 8005286:	e7e4      	b.n	8005252 <_vfiprintf_r+0x1e6>
 8005288:	08005918 	.word	0x08005918
 800528c:	0800591e 	.word	0x0800591e
 8005290:	08005922 	.word	0x08005922
 8005294:	08002db9 	.word	0x08002db9
 8005298:	08005047 	.word	0x08005047

0800529c <__sflush_r>:
 800529c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	0716      	lsls	r6, r2, #28
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	d454      	bmi.n	8005354 <__sflush_r+0xb8>
 80052aa:	684b      	ldr	r3, [r1, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dc02      	bgt.n	80052b6 <__sflush_r+0x1a>
 80052b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dd48      	ble.n	8005348 <__sflush_r+0xac>
 80052b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	d045      	beq.n	8005348 <__sflush_r+0xac>
 80052bc:	2300      	movs	r3, #0
 80052be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052c2:	682f      	ldr	r7, [r5, #0]
 80052c4:	6a21      	ldr	r1, [r4, #32]
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	d030      	beq.n	800532c <__sflush_r+0x90>
 80052ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	0759      	lsls	r1, r3, #29
 80052d0:	d505      	bpl.n	80052de <__sflush_r+0x42>
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052d8:	b10b      	cbz	r3, 80052de <__sflush_r+0x42>
 80052da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	4628      	mov	r0, r5
 80052e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052e4:	6a21      	ldr	r1, [r4, #32]
 80052e6:	47b0      	blx	r6
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	d106      	bne.n	80052fc <__sflush_r+0x60>
 80052ee:	6829      	ldr	r1, [r5, #0]
 80052f0:	291d      	cmp	r1, #29
 80052f2:	d82b      	bhi.n	800534c <__sflush_r+0xb0>
 80052f4:	4a28      	ldr	r2, [pc, #160]	@ (8005398 <__sflush_r+0xfc>)
 80052f6:	410a      	asrs	r2, r1
 80052f8:	07d6      	lsls	r6, r2, #31
 80052fa:	d427      	bmi.n	800534c <__sflush_r+0xb0>
 80052fc:	2200      	movs	r2, #0
 80052fe:	6062      	str	r2, [r4, #4]
 8005300:	6922      	ldr	r2, [r4, #16]
 8005302:	04d9      	lsls	r1, r3, #19
 8005304:	6022      	str	r2, [r4, #0]
 8005306:	d504      	bpl.n	8005312 <__sflush_r+0x76>
 8005308:	1c42      	adds	r2, r0, #1
 800530a:	d101      	bne.n	8005310 <__sflush_r+0x74>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b903      	cbnz	r3, 8005312 <__sflush_r+0x76>
 8005310:	6560      	str	r0, [r4, #84]	@ 0x54
 8005312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005314:	602f      	str	r7, [r5, #0]
 8005316:	b1b9      	cbz	r1, 8005348 <__sflush_r+0xac>
 8005318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800531c:	4299      	cmp	r1, r3
 800531e:	d002      	beq.n	8005326 <__sflush_r+0x8a>
 8005320:	4628      	mov	r0, r5
 8005322:	f7ff f9fd 	bl	8004720 <_free_r>
 8005326:	2300      	movs	r3, #0
 8005328:	6363      	str	r3, [r4, #52]	@ 0x34
 800532a:	e00d      	b.n	8005348 <__sflush_r+0xac>
 800532c:	2301      	movs	r3, #1
 800532e:	4628      	mov	r0, r5
 8005330:	47b0      	blx	r6
 8005332:	4602      	mov	r2, r0
 8005334:	1c50      	adds	r0, r2, #1
 8005336:	d1c9      	bne.n	80052cc <__sflush_r+0x30>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0c6      	beq.n	80052cc <__sflush_r+0x30>
 800533e:	2b1d      	cmp	r3, #29
 8005340:	d001      	beq.n	8005346 <__sflush_r+0xaa>
 8005342:	2b16      	cmp	r3, #22
 8005344:	d11d      	bne.n	8005382 <__sflush_r+0xe6>
 8005346:	602f      	str	r7, [r5, #0]
 8005348:	2000      	movs	r0, #0
 800534a:	e021      	b.n	8005390 <__sflush_r+0xf4>
 800534c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005350:	b21b      	sxth	r3, r3
 8005352:	e01a      	b.n	800538a <__sflush_r+0xee>
 8005354:	690f      	ldr	r7, [r1, #16]
 8005356:	2f00      	cmp	r7, #0
 8005358:	d0f6      	beq.n	8005348 <__sflush_r+0xac>
 800535a:	0793      	lsls	r3, r2, #30
 800535c:	bf18      	it	ne
 800535e:	2300      	movne	r3, #0
 8005360:	680e      	ldr	r6, [r1, #0]
 8005362:	bf08      	it	eq
 8005364:	694b      	ldreq	r3, [r1, #20]
 8005366:	1bf6      	subs	r6, r6, r7
 8005368:	600f      	str	r7, [r1, #0]
 800536a:	608b      	str	r3, [r1, #8]
 800536c:	2e00      	cmp	r6, #0
 800536e:	ddeb      	ble.n	8005348 <__sflush_r+0xac>
 8005370:	4633      	mov	r3, r6
 8005372:	463a      	mov	r2, r7
 8005374:	4628      	mov	r0, r5
 8005376:	6a21      	ldr	r1, [r4, #32]
 8005378:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800537c:	47e0      	blx	ip
 800537e:	2800      	cmp	r0, #0
 8005380:	dc07      	bgt.n	8005392 <__sflush_r+0xf6>
 8005382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800538a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005392:	4407      	add	r7, r0
 8005394:	1a36      	subs	r6, r6, r0
 8005396:	e7e9      	b.n	800536c <__sflush_r+0xd0>
 8005398:	dfbffffe 	.word	0xdfbffffe

0800539c <_fflush_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b913      	cbnz	r3, 80053ac <_fflush_r+0x10>
 80053a6:	2500      	movs	r5, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	b118      	cbz	r0, 80053b6 <_fflush_r+0x1a>
 80053ae:	6a03      	ldr	r3, [r0, #32]
 80053b0:	b90b      	cbnz	r3, 80053b6 <_fflush_r+0x1a>
 80053b2:	f7fe f94b 	bl	800364c <__sinit>
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f3      	beq.n	80053a6 <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x32>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x32>
 80053c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ca:	f7fe fb3a 	bl	8003a42 <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff63 	bl	800529c <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053d8:	4605      	mov	r5, r0
 80053da:	07da      	lsls	r2, r3, #31
 80053dc:	d4e4      	bmi.n	80053a8 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4e1      	bmi.n	80053a8 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e6:	f7fe fb2d 	bl	8003a44 <__retarget_lock_release_recursive>
 80053ea:	e7dd      	b.n	80053a8 <_fflush_r+0xc>

080053ec <__swhatbuf_r>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	460c      	mov	r4, r1
 80053f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f4:	4615      	mov	r5, r2
 80053f6:	2900      	cmp	r1, #0
 80053f8:	461e      	mov	r6, r3
 80053fa:	b096      	sub	sp, #88	@ 0x58
 80053fc:	da0c      	bge.n	8005418 <__swhatbuf_r+0x2c>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	2100      	movs	r1, #0
 8005402:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005406:	bf14      	ite	ne
 8005408:	2340      	movne	r3, #64	@ 0x40
 800540a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800540e:	2000      	movs	r0, #0
 8005410:	6031      	str	r1, [r6, #0]
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	b016      	add	sp, #88	@ 0x58
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	466a      	mov	r2, sp
 800541a:	f000 f849 	bl	80054b0 <_fstat_r>
 800541e:	2800      	cmp	r0, #0
 8005420:	dbed      	blt.n	80053fe <__swhatbuf_r+0x12>
 8005422:	9901      	ldr	r1, [sp, #4]
 8005424:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005428:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800542c:	4259      	negs	r1, r3
 800542e:	4159      	adcs	r1, r3
 8005430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005434:	e7eb      	b.n	800540e <__swhatbuf_r+0x22>

08005436 <__smakebuf_r>:
 8005436:	898b      	ldrh	r3, [r1, #12]
 8005438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800543a:	079d      	lsls	r5, r3, #30
 800543c:	4606      	mov	r6, r0
 800543e:	460c      	mov	r4, r1
 8005440:	d507      	bpl.n	8005452 <__smakebuf_r+0x1c>
 8005442:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	2301      	movs	r3, #1
 800544c:	6163      	str	r3, [r4, #20]
 800544e:	b003      	add	sp, #12
 8005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005452:	466a      	mov	r2, sp
 8005454:	ab01      	add	r3, sp, #4
 8005456:	f7ff ffc9 	bl	80053ec <__swhatbuf_r>
 800545a:	9f00      	ldr	r7, [sp, #0]
 800545c:	4605      	mov	r5, r0
 800545e:	4639      	mov	r1, r7
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff f9cf 	bl	8004804 <_malloc_r>
 8005466:	b948      	cbnz	r0, 800547c <__smakebuf_r+0x46>
 8005468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546c:	059a      	lsls	r2, r3, #22
 800546e:	d4ee      	bmi.n	800544e <__smakebuf_r+0x18>
 8005470:	f023 0303 	bic.w	r3, r3, #3
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	e7e2      	b.n	8005442 <__smakebuf_r+0xc>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	9b01      	ldr	r3, [sp, #4]
 800548a:	6020      	str	r0, [r4, #0]
 800548c:	b15b      	cbz	r3, 80054a6 <__smakebuf_r+0x70>
 800548e:	4630      	mov	r0, r6
 8005490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005494:	f000 f81e 	bl	80054d4 <_isatty_r>
 8005498:	b128      	cbz	r0, 80054a6 <__smakebuf_r+0x70>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f023 0303 	bic.w	r3, r3, #3
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	431d      	orrs	r5, r3
 80054aa:	81a5      	strh	r5, [r4, #12]
 80054ac:	e7cf      	b.n	800544e <__smakebuf_r+0x18>
	...

080054b0 <_fstat_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d06      	ldr	r5, [pc, #24]	@ (80054d0 <_fstat_r+0x20>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	f7fb fcb5 	bl	8000e2c <_fstat>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d102      	bne.n	80054cc <_fstat_r+0x1c>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	b103      	cbz	r3, 80054cc <_fstat_r+0x1c>
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	20000438 	.word	0x20000438

080054d4 <_isatty_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	2300      	movs	r3, #0
 80054d8:	4d05      	ldr	r5, [pc, #20]	@ (80054f0 <_isatty_r+0x1c>)
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fb fcb3 	bl	8000e4a <_isatty>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_isatty_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_isatty_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000438 	.word	0x20000438

080054f4 <_sbrk_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	2300      	movs	r3, #0
 80054f8:	4d05      	ldr	r5, [pc, #20]	@ (8005510 <_sbrk_r+0x1c>)
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fb fcba 	bl	8000e78 <_sbrk>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_sbrk_r+0x1a>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_sbrk_r+0x1a>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	20000438 	.word	0x20000438

08005514 <__assert_func>:
 8005514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005516:	4614      	mov	r4, r2
 8005518:	461a      	mov	r2, r3
 800551a:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <__assert_func+0x2c>)
 800551c:	4605      	mov	r5, r0
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68d8      	ldr	r0, [r3, #12]
 8005522:	b954      	cbnz	r4, 800553a <__assert_func+0x26>
 8005524:	4b07      	ldr	r3, [pc, #28]	@ (8005544 <__assert_func+0x30>)
 8005526:	461c      	mov	r4, r3
 8005528:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800552c:	9100      	str	r1, [sp, #0]
 800552e:	462b      	mov	r3, r5
 8005530:	4905      	ldr	r1, [pc, #20]	@ (8005548 <__assert_func+0x34>)
 8005532:	f000 f841 	bl	80055b8 <fiprintf>
 8005536:	f000 f851 	bl	80055dc <abort>
 800553a:	4b04      	ldr	r3, [pc, #16]	@ (800554c <__assert_func+0x38>)
 800553c:	e7f4      	b.n	8005528 <__assert_func+0x14>
 800553e:	bf00      	nop
 8005540:	2000007c 	.word	0x2000007c
 8005544:	0800596e 	.word	0x0800596e
 8005548:	08005940 	.word	0x08005940
 800554c:	08005933 	.word	0x08005933

08005550 <_calloc_r>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	fba1 5402 	umull	r5, r4, r1, r2
 8005556:	b93c      	cbnz	r4, 8005568 <_calloc_r+0x18>
 8005558:	4629      	mov	r1, r5
 800555a:	f7ff f953 	bl	8004804 <_malloc_r>
 800555e:	4606      	mov	r6, r0
 8005560:	b928      	cbnz	r0, 800556e <_calloc_r+0x1e>
 8005562:	2600      	movs	r6, #0
 8005564:	4630      	mov	r0, r6
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	220c      	movs	r2, #12
 800556a:	6002      	str	r2, [r0, #0]
 800556c:	e7f9      	b.n	8005562 <_calloc_r+0x12>
 800556e:	462a      	mov	r2, r5
 8005570:	4621      	mov	r1, r4
 8005572:	f7fe f9e9 	bl	8003948 <memset>
 8005576:	e7f5      	b.n	8005564 <_calloc_r+0x14>

08005578 <__ascii_mbtowc>:
 8005578:	b082      	sub	sp, #8
 800557a:	b901      	cbnz	r1, 800557e <__ascii_mbtowc+0x6>
 800557c:	a901      	add	r1, sp, #4
 800557e:	b142      	cbz	r2, 8005592 <__ascii_mbtowc+0x1a>
 8005580:	b14b      	cbz	r3, 8005596 <__ascii_mbtowc+0x1e>
 8005582:	7813      	ldrb	r3, [r2, #0]
 8005584:	600b      	str	r3, [r1, #0]
 8005586:	7812      	ldrb	r2, [r2, #0]
 8005588:	1e10      	subs	r0, r2, #0
 800558a:	bf18      	it	ne
 800558c:	2001      	movne	r0, #1
 800558e:	b002      	add	sp, #8
 8005590:	4770      	bx	lr
 8005592:	4610      	mov	r0, r2
 8005594:	e7fb      	b.n	800558e <__ascii_mbtowc+0x16>
 8005596:	f06f 0001 	mvn.w	r0, #1
 800559a:	e7f8      	b.n	800558e <__ascii_mbtowc+0x16>

0800559c <__ascii_wctomb>:
 800559c:	4603      	mov	r3, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	b141      	cbz	r1, 80055b4 <__ascii_wctomb+0x18>
 80055a2:	2aff      	cmp	r2, #255	@ 0xff
 80055a4:	d904      	bls.n	80055b0 <__ascii_wctomb+0x14>
 80055a6:	228a      	movs	r2, #138	@ 0x8a
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	4770      	bx	lr
 80055b0:	2001      	movs	r0, #1
 80055b2:	700a      	strb	r2, [r1, #0]
 80055b4:	4770      	bx	lr
	...

080055b8 <fiprintf>:
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	b503      	push	{r0, r1, lr}
 80055bc:	4601      	mov	r1, r0
 80055be:	ab03      	add	r3, sp, #12
 80055c0:	4805      	ldr	r0, [pc, #20]	@ (80055d8 <fiprintf+0x20>)
 80055c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	f7ff fd4f 	bl	800506c <_vfiprintf_r>
 80055ce:	b002      	add	sp, #8
 80055d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d4:	b003      	add	sp, #12
 80055d6:	4770      	bx	lr
 80055d8:	2000007c 	.word	0x2000007c

080055dc <abort>:
 80055dc:	2006      	movs	r0, #6
 80055de:	b508      	push	{r3, lr}
 80055e0:	f000 f82c 	bl	800563c <raise>
 80055e4:	2001      	movs	r0, #1
 80055e6:	f7fb fbd2 	bl	8000d8e <_exit>

080055ea <_raise_r>:
 80055ea:	291f      	cmp	r1, #31
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4605      	mov	r5, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	d904      	bls.n	80055fe <_raise_r+0x14>
 80055f4:	2316      	movs	r3, #22
 80055f6:	6003      	str	r3, [r0, #0]
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005600:	b112      	cbz	r2, 8005608 <_raise_r+0x1e>
 8005602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005606:	b94b      	cbnz	r3, 800561c <_raise_r+0x32>
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f831 	bl	8005670 <_getpid_r>
 800560e:	4622      	mov	r2, r4
 8005610:	4601      	mov	r1, r0
 8005612:	4628      	mov	r0, r5
 8005614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005618:	f000 b818 	b.w	800564c <_kill_r>
 800561c:	2b01      	cmp	r3, #1
 800561e:	d00a      	beq.n	8005636 <_raise_r+0x4c>
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	d103      	bne.n	800562c <_raise_r+0x42>
 8005624:	2316      	movs	r3, #22
 8005626:	6003      	str	r3, [r0, #0]
 8005628:	2001      	movs	r0, #1
 800562a:	e7e7      	b.n	80055fc <_raise_r+0x12>
 800562c:	2100      	movs	r1, #0
 800562e:	4620      	mov	r0, r4
 8005630:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005634:	4798      	blx	r3
 8005636:	2000      	movs	r0, #0
 8005638:	e7e0      	b.n	80055fc <_raise_r+0x12>
	...

0800563c <raise>:
 800563c:	4b02      	ldr	r3, [pc, #8]	@ (8005648 <raise+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7ff bfd2 	b.w	80055ea <_raise_r>
 8005646:	bf00      	nop
 8005648:	2000007c 	.word	0x2000007c

0800564c <_kill_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	2300      	movs	r3, #0
 8005650:	4d06      	ldr	r5, [pc, #24]	@ (800566c <_kill_r+0x20>)
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	f7fb fb88 	bl	8000d6e <_kill>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	d102      	bne.n	8005668 <_kill_r+0x1c>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	b103      	cbz	r3, 8005668 <_kill_r+0x1c>
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	20000438 	.word	0x20000438

08005670 <_getpid_r>:
 8005670:	f7fb bb76 	b.w	8000d60 <_getpid>

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
